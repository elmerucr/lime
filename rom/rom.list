                      ;-----------------------------------------------------------------------
                      ; rom.s (assembles with asm6809)
                      ; lime
                      ;
                      ; Copyright © 2025 elmerucr. All rights reserved.
                      ;-----------------------------------------------------------------------
                      
0000                                  include "definitions.i"
                      ;-----------------------------------------------------------------------
                      ; definitions.i
                      ; lime
                      ;
                      ; Copyright © 2025 elmerucr. All rights reserved.
                      ;-----------------------------------------------------------------------
                      
0200                  VECTOR_ILLOP_INDIRECT   equ     $0200
0202                  VECTOR_SWI3_INDIRECT    equ     $0202
0204                  VECTOR_SWI2_INDIRECT    equ     $0204
0206                  VECTOR_FIRQ_INDIRECT    equ     $0206
0208                  VECTOR_IRQ_INDIRECT     equ     $0208
020A                  VECTOR_SWI_INDIRECT     equ     $020a
020C                  VECTOR_NMI_INDIRECT     equ     $020c
                      ; $020e unused and reserved
0210                  VECTOR_TIMER0_INDIRECT  equ     $0210
0212                  VECTOR_TIMER1_INDIRECT  equ     $0212
0214                  VECTOR_TIMER2_INDIRECT  equ     $0214
0216                  VECTOR_TIMER3_INDIRECT  equ     $0216
0218                  VECTOR_TIMER4_INDIRECT  equ     $0218
021A                  VECTOR_TIMER5_INDIRECT  equ     $021a
021C                  VECTOR_TIMER6_INDIRECT  equ     $021c
021E                  VECTOR_TIMER7_INDIRECT  equ     $021e
0220                  VECTOR_VDC_INDIRECT     equ     $0220
                      
                      ; vdc (video display controller)
0400                  VDC_SR                  equ     $0400
0401                  VDC_CR                  equ     $0401
0402                  VDC_CURRENT_SCANLINE    equ     $0402
0403                  VDC_IRQ_SCANLINE        equ     $0403
0404                  VDC_BG_COLOR            equ     $0404
                      ;$0405
0406                  VDC_CURRENT_LAYER       equ     $0406
0407                  VDC_CURRENT_SPRITE      equ     $0407
                      
0410                  VDC_LAYER_X             equ     $0410
0411                  VDC_LAYER_Y             equ     $0411
0412                  VDC_LAYER_FLAGS         equ     $0412
                      ;$0413
0414                  VDC_LAYER_COLOR_0       equ     $0414
0415                  VDC_LAYER_COLOR_1       equ     $0415
0416                  VDC_LAYER_COLOR_2       equ     $0416
0417                  VDC_LAYER_COLOR_3       equ     $0417
                      
0418                  VDC_SPRITE_X            equ     $0418
0419                  VDC_SPRITE_Y            equ     $0419
041A                  VDC_SPRITE_FLAGS        equ     $041a
041B                  VDC_SPRITE_INDEX        equ     $041b
041C                  VDC_SPRITE_COLOR_0      equ     $041c
041D                  VDC_SPRITE_COLOR_1      equ     $041d
041E                  VDC_SPRITE_COLOR_2      equ     $041e
041F                  VDC_SPRITE_COLOR_3      equ     $041f
                      
0800                  VDC_TILESET_0           equ     $0800
1000                  VDC_TILESET_1           equ     $1000
2000                  VDC_LAYER_0             equ     $2000
2400                  VDC_LAYER_1             equ     $2400
2800                  VDC_LAYER_2             equ     $2800
2C00                  VDC_LAYER_3             equ     $2c00
                      
                      ; timer
0440                  TIMER_SR                equ     $0440
0441                  TIMER_CR                equ     $0441
                      
                      ; core
0480                  CORE_SR                 equ     $0480
0481                  CORE_CR                 equ     $0481
0482                  CORE_ROMS               equ     $0482
0484                  CORE_FILE_DATA          equ     $0484
0488                  CORE_INPUT_0            equ     $0488
                      
                      ; sound devices
0500                  SID0_F                  equ     $0500
0502                  SID0_PW                 equ     $0502
051B                  SID0_V                  equ     $051b
053B                  SID1_V                  equ     $053b
0580                  MIX_SID0_LEFT           equ     $0580
0581                  MIX_SID0_RIGHT          equ     $0581
0582                  MIX_SID1_LEFT           equ     $0582
0583                  MIX_SID1_RIGHT          equ     $0583
0584                  MIX_ANA0_LEFT           equ     $0584
0585                  MIX_ANA0_RIGHT          equ     $0585
0586                  MIX_ANA1_LEFT           equ     $0586
0587                  MIX_ANA1_RIGHT          equ     $0587
                      
                      ; general
3000                  RAM_START               equ     $3000
FE00                  ROM_START               equ     $fe00
                      
0000                  logo_animation  equ     $00
0001                  execution_addr  equ     $01
0003                  binary_ready    equ     $03
                      
0000                                  setdp   $00             ; assembler now assumes dp = $00 and
                                                              ; uses dp addressing when appropriate
                      
FE00                                  org     $fe00
                      
FE00 726F6D20302E3820                 fcn     "rom 0.8 20250319"
     3230323530333139
     00
FE11 10CE0200         reset           lds     #$0200          ; sets system stackpointer + enables nmi
FE15 CEFE00                           ldu     #$fe00          ; sets user stackpointer
                      
FE18 B60482                           lda     CORE_ROMS       ; make font visible to cpu
FE1B 8A02                             ora     #%00000010
FE1D B70482                           sta     CORE_ROMS
                      
FE20 8E1000                           ldx     #VDC_TILESET_1  ; copy font from rom to ram
FE23 A684             1               lda     ,x
FE25 A780                             sta     ,x+
FE27 8C2000                           cmpx    #VDC_TILESET_1+$1000
FE2A 26F7                             bne     1b
                      
FE2C B60482                           lda     CORE_ROMS               ; turn off font rom
FE2F 84FD                             anda    #%11111101
FE31 B70482                           sta     CORE_ROMS
                      
                      ; init logo
FE34 8EFEC5                           ldx     #logo_data              ; x points to start of logo data
FE37 5F                               clrb                            ; b holds current sprite
FE38 F70407           1               stb     VDC_CURRENT_SPRITE      ; set active sprite
FE3B 108E0418                         ldy     #VDC_SPRITE_X           ; y points to start of sprite registers
FE3F A680             2               lda     ,x+                     ; copy data
FE41 A7A0                             sta     ,y+
FE43 108C041C                         cmpy    #VDC_SPRITE_X+4         ; did we copy 4 values?
FE47 26F6                             bne     2b                      ; not yet, continue at 2
FE49 5C                               incb                            ; we did, set next active sprite
FE4A 8CFEE5                           cmpx    #logo_data+32           ; did we reach end of data?
FE4D 26E9                             bne     1b                      ; no, continue at 1
                      
                      ; set variable for letter wobble
FE4F 8640                             lda     #$40
FE51 9700                             sta     logo_animation
                      
                      ; set jump vectors
FE53 8EFEE5                           ldx     #exc_irq
FE56 BF0208                           stx     VECTOR_IRQ_INDIRECT
FE59 8EFF4A                           ldx     #timer_interrupt
FE5C 108E0210                         ldy     #VECTOR_TIMER0_INDIRECT
FE60 AFA1             1               stx     ,y++
FE62 108C0220                         cmpy    #VECTOR_TIMER0_INDIRECT+16
FE66 26F8                             bne     1b
FE68 8EFF19                           ldx     #vdc_interrupt
FE6B BF0220                           stx     VECTOR_VDC_INDIRECT
                      
                      ; set raster irq on scanline 159
FE6E 869F                             lda     #$9f
FE70 B70403                           sta     VDC_IRQ_SCANLINE
FE73 8601                             lda     #%00000001
FE75 B70401                           sta     VDC_CR          ; enable irq's for vdc
                      
                      ; cleary binary ready flag
FE78 0F03                             clr     binary_ready
                      
                      ; sound
FE7A 8D24                             bsr     sound_reset
                      
                      ; enable irq's
FE7C 1CEF                             andcc   #%11101111
                      
                      ; "main" loop
FE7E 13               loop            sync
FE7F 9603                             lda     binary_ready
FE81 27FB                             beq     loop
                      
                      ; disable logo and jump to start of binary
FE83 1A10             _jump           orcc    #%00010000              ; disable irq's
FE85 7F0481                           clr     CORE_CR                 ; no irq when new bin inserted
FE88 7F0401                           clr     VDC_CR
FE8B 5F                               clrb
FE8C F70407           1               stb     VDC_CURRENT_SPRITE
FE8F B6041A                           lda     VDC_SPRITE_FLAGS
FE92 84FE                             anda    #%11111110
FE94 B7041A                           sta     VDC_SPRITE_FLAGS
FE97 5C                               incb
FE98 C108                             cmpb    #$08
FE9A 26F0                             bne     1b
FE9C 6E9F0001                         jmp     [execution_addr]
                      
FEA0 3626             sound_reset     pshu    y,b,a
FEA2 C640                             ldb     #$40
FEA4 108E0500                         ldy     #SID0_F                 ; start of sound (sid 0)
FEA8 6FA0             1               clr     ,y+
FEAA 5A                               decb
FEAB 26FB                             bne     1b
FEAD 867F                             lda     #$7f                    ; mixer at half volume
FEAF C608                             ldb     #$08                    ; 8 mixing registers in total
FEB1 108E0580                         ldy     #MIX_SID0_LEFT          ; start of io mixer
FEB5 A7A0             2               sta     ,y+
FEB7 5A                               decb
FEB8 26FB                             bne     2b
FEBA 860F                             lda     #$0f                    ; set sid volumes to max
FEBC B7051B                           sta     SID0_V                  ; sid 0 volume
FEBF B7053B                           sta     SID1_V                  ; sid 1 volume
FEC2 3726                             pulu    y,b,a
FEC4 39                               rts
                      
FEC5 7040071C         logo_data       fcb     112,64,%111,$1c         ; icon top left
FEC9 7840071D                         fcb     120,64,%111,$1d         ; icon top right
FECD 7048071E                         fcb     112,72,%111,$1e         ; icon bottom left
FED1 7848071F                         fcb     120,72,%111,$1f         ; icon bottom right
FED5 6B50076C                         fcb     107,80,%111,$6c         ; l
FED9 70500769                         fcb     112,80,%111,$69         ; i
FEDD 7650076D                         fcb     118,80,%111,$6d         ; m
FEE1 7E500765                         fcb     126,80,%111,$65         ; e
                      
FEE5 B60440           exc_irq         lda     TIMER_SR                ; load timer status register
FEE8 2716                             beq     exc_vdc
FEEA 8E0210                           ldx     #VECTOR_TIMER0_INDIRECT ; it is one of the timers, load x with 1st vector indirect
FEED 8601                             lda     #%00000001
FEEF B50440           exc_test_tim    bita    TIMER_SR
FEF2 2705                             beq     exc_next_tim
FEF4 B70440                           sta     TIMER_SR                ; acknowledge interrupt
FEF7 6E94                             jmp     [,x]
FEF9 48               exc_next_tim    asla
FEFA 271C                             beq     exc_irq_end
FEFC 3002                             leax    2,x                     ; load x with address of next vector
FEFE 20EF                             bra     exc_test_tim
FF00 B60400           exc_vdc         lda     VDC_SR
FF03 2708                             beq     exc_core
FF05 B70400                           sta     VDC_SR
FF08 8E0220                           ldx     #VECTOR_VDC_INDIRECT
FF0B 6E94                             jmp     [,x]
FF0D B60480           exc_core        lda     CORE_SR                 ; triggered when binary inserted
FF10 2706                             beq     exc_irq_end
FF12 B70480                           sta     CORE_SR
FF15 7EFF4B                           jmp     core_interrupt
FF18 3B               exc_irq_end     rti
                      
FF19 9600             vdc_interrupt   lda     logo_animation
FF1B 4C                               inca
FF1C 8190                             cmpa    #$90
FF1E 2606                             bne     1f                      ; didn't reach #$90
FF20 8601                             lda     #%00000001              ; we did reach #$90
FF22 B70481                           sta     CORE_CR                 ; activate irq's for binary insert
                                                                      ; this makes sure letters wobble at least 1 time
FF25 4F                               clra
                      
FF26 9700             1               sta     logo_animation
                      
FF28 C604                             ldb     #$04                    ; set current sprite to 4
FF2A F70407           2               stb     VDC_CURRENT_SPRITE
                      
FF2D 8650                             lda     #80                     ; set default y value
FF2F B70419                           sta     VDC_SPRITE_Y
                      
FF32 B60418                           lda     VDC_SPRITE_X            ; load its x register
FF35 9000                             suba    logo_animation          ; subtract the ani var
FF37 8008                             suba    #$08
FF39 2203                             bhi     3f                      ; if difference larger than 8 keep its y value
FF3B 7A0419                           dec     VDC_SPRITE_Y
FF3E 5C               3               incb
FF3F C108                             cmpb    #$08
FF41 26E7                             bne     2b
                      
FF43 B60488                           lda     CORE_INPUT_0            ; use controller input to change screen background color
FF46 B70404                           sta     VDC_BG_COLOR
FF49 3B                               rti
                      
FF4A 3B               timer_interrupt rti
                      
                      ; handle loading of binary and jump to code if successful
FF4B B60484           core_interrupt  lda     CORE_FILE_DATA          ; first value $00?
FF4E 2636                             bne     core_int_end            ; no
FF50 B60484           1               lda     CORE_FILE_DATA          ; yes, start chunk
FF53 F60484                           ldb     CORE_FILE_DATA
FF56 1F02                             tfr     d,y                     ; y holds size
FF58 B60484                           lda     CORE_FILE_DATA
FF5B F60484                           ldb     CORE_FILE_DATA
FF5E 1F01                             tfr     d,x                     ; x holds memory location
FF60 B60484           2               lda     CORE_FILE_DATA          ; get a byte
FF63 A780                             sta     ,x+
FF65 313F                             leay    -1,y
FF67 26F7                             bne     2b                      ; finished?
FF69 B60484                           lda     CORE_FILE_DATA
FF6C 27E2                             beq     1b                      ; is $00 start another chunk
FF6E 81FF                             cmpa    #$ff
FF70 2614                             bne     core_int_end            ; not equal
FF72 B60484                           lda     CORE_FILE_DATA
FF75 260F                             bne     core_int_end            ; not equal to zero
FF77 B60484                           lda     CORE_FILE_DATA
FF7A 260A                             bne     core_int_end            ; not equal to zero
FF7C B60484                           lda     CORE_FILE_DATA
FF7F F60484                           ldb     CORE_FILE_DATA          ; d now contains execution address
FF82 DD01                             std     execution_addr          ; store it
FF84 0C03                             inc     binary_ready            ; %00000001
FF86 3B               core_int_end    rti
                      
FF87 6E9F0208         1               jmp     [VECTOR_IRQ_INDIRECT]
                      
FFF0                                  org     $fff0
FFF0 0000             vectors         fdb     $0000
FFF2 0000                             fdb     $0000
FFF4 0000                             fdb     $0000
FFF6 0000                             fdb     $0000
FFF8 FF87                             fdb     1b              ; irq vector
FFFA 0000                             fdb     $0000
FFFC 0000                             fdb     $0000
FFFE FE11                             fdb     reset           ; reset vector
