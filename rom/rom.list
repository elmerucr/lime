                      ;-----------------------------------------------------------------------
                      ; rom.s (assembles with asm6809)
                      ; lime
                      ;
                      ; Copyright © 2025 elmerucr. All rights reserved.
                      ;-----------------------------------------------------------------------
                      
0000                                  include "definitions.i"
                      ;-----------------------------------------------------------------------
                      ; definitions.i
                      ; lime
                      ;
                      ; Copyright © 2025 elmerucr. All rights reserved.
                      ;-----------------------------------------------------------------------
                      
0200                  VECTOR_ILLOP_INDIRECT   equ     $0200
0202                  VECTOR_SWI3_INDIRECT    equ     $0202
0204                  VECTOR_SWI2_INDIRECT    equ     $0204
0206                  VECTOR_FIRQ_INDIRECT    equ     $0206
0208                  VECTOR_IRQ_INDIRECT     equ     $0208
020A                  VECTOR_SWI_INDIRECT     equ     $020a
020C                  VECTOR_NMI_INDIRECT     equ     $020c
                      ; $020e unused and reserved
0210                  VECTOR_TIMER0_INDIRECT  equ     $0210
0212                  VECTOR_TIMER1_INDIRECT  equ     $0212
0214                  VECTOR_TIMER2_INDIRECT  equ     $0214
0216                  VECTOR_TIMER3_INDIRECT  equ     $0216
0218                  VECTOR_TIMER4_INDIRECT  equ     $0218
021A                  VECTOR_TIMER5_INDIRECT  equ     $021a
021C                  VECTOR_TIMER6_INDIRECT  equ     $021c
021E                  VECTOR_TIMER7_INDIRECT  equ     $021e
0220                  VECTOR_VDC_INDIRECT     equ     $0220
                      
                      ; vdc (video display controller)
0400                  VDC_SR                  equ     $0400
0401                  VDC_CR                  equ     $0401
0402                  VDC_CURRENT_SCANLINE    equ     $0402
0403                  VDC_IRQ_SCANLINE        equ     $0403
0404                  VDC_BG_COLOR            equ     $0404
0406                  VDC_CURRENT_LAYER       equ     $0406
0407                  VDC_CURRENT_SPRITE      equ     $0407
0418                  VDC_SPRITE_X            equ     $0418
0419                  VDC_SPRITE_Y            equ     $0419
041A                  VDC_SPRITE_FLAGS        equ     $041a
041B                  VDC_SPRITE_INDEX        equ     $041b
041C                  VDC_SPRITE_COLOR_0      equ     $041c
041D                  VDC_SPRITE_COLOR_1      equ     $041d
041E                  VDC_SPRITE_COLOR_2      equ     $041e
041F                  VDC_SPRITE_COLOR_3      equ     $041f
                      
0800                  VDC_TILESET_0           equ     $0800
1000                  VDC_TILESET_1           equ     $1000
2000                  VDC_LAYER_0             equ     $2000
2400                  VDC_LAYER_1             equ     $2400
2800                  VDC_LAYER_2             equ     $2800
2C00                  VDC_LAYER_3             equ     $2c00
                      
                      ; core
0480                  CORE_SR                 equ     $0480
0481                  CORE_CR                 equ     $0481
0482                  CORE_ROMS               equ     $0482
0484                  CORE_FILE_DATA          equ     $0484
0488                  CORE_INPUT_0            equ     $0488
                      
                      ; sound devices
0500                  SID0_F                  equ     $0500
0502                  SID0_PW                 equ     $0502
051B                  SID0_V                  equ     $051b
053B                  SID1_V                  equ     $053b
0580                  MIX_SID0_LEFT           equ     $0580
0581                  MIX_SID0_RIGHT          equ     $0581
0582                  MIX_SID1_LEFT           equ     $0582
0583                  MIX_SID1_RIGHT          equ     $0583
0584                  MIX_ANA0_LEFT           equ     $0584
0585                  MIX_ANA0_RIGHT          equ     $0585
0586                  MIX_ANA1_LEFT           equ     $0586
0587                  MIX_ANA1_RIGHT          equ     $0587
                      
0000                  logo_animation  equ     $00
0001                  execution_addr  equ     $01
0002                  binary_ready    equ     $02
                      
0000                                  setdp   $00             ; assembler now assumes dp = $00 and
                                                              ; uses dp addressing when appropriate
                      
FE00                                  org     $fe00
                      
FE00  726F6D20302E3720323032353033303900                 fcn     "rom 0.7 20250309"
FE11  10CE0200        reset           lds     #$0200          ; sets system stackpointer + enables nmi
FE15  CEFE00                          ldu     #$fe00          ; sets user stackpointer
                      
FE18  B60482                          lda     CORE_ROMS       ; make font visible to cpu
FE1B  8A02                            ora     #%00000010
FE1D  B70482                          sta     CORE_ROMS
                      
FE20  8E1000                          ldx     #VDC_TILESET_1  ; copy font from rom to ram
FE23  A684            1               lda     ,x
FE25  A780                            sta     ,x+
FE27  8C2000                          cmpx    #VDC_TILESET_1+$1000
FE2A  26F7                            bne     1b
                      
FE2C  B60482                          lda     CORE_ROMS               ; turn off font rom
FE2F  84FD                            anda    #%11111101
FE31  B70482                          sta     CORE_ROMS
                      
                      ; init logo
FE34  8EFEC6                          ldx     #logo_data              ; x points to start of logo data
FE37  5F                              clrb                            ; b holds current sprite
FE38  F70407          1               stb     VDC_CURRENT_SPRITE      ; set active sprite
FE3B  108E0418                        ldy     #VDC_SPRITE_X           ; y points to start of sprite registers
FE3F  A680            2               lda     ,x+                     ; copy data
FE41  A7A0                            sta     ,y+
FE43  108C041C                        cmpy    #VDC_SPRITE_X+4         ; did we copy 4 values?
FE47  26F6                            bne     2b                      ; not yet, continue at 2
FE49  5C                              incb                            ; we did, set next active sprite
FE4A  8CFEE6                          cmpx    #logo_data+32           ; did we reach end of data?
FE4D  26E9                            bne     1b                      ; no, continue at 1
                      
                      ; set variable for letter wobble
FE4F  8660                            lda     #$60
FE51  9700                            sta     logo_animation
                      
                      ; set jump vectors
FE53  8EFEE6                          ldx     #exc_irq
FE56  BF0208                          stx     VECTOR_IRQ_INDIRECT
FE59  8EFF4B                          ldx     #timer_interrupt
FE5C  108E0210                        ldy     #VECTOR_TIMER0_INDIRECT
FE60  AFA1            1               stx     ,y++
FE62  108C0220                        cmpy    #VECTOR_TIMER0_INDIRECT+16
FE66  26F8                            bne     1b
FE68  8EFF1A                          ldx     #vdc_interrupt
FE6B  BF0220                          stx     VECTOR_VDC_INDIRECT
                      
                      ; set raster irq on scanline 159
FE6E  869F                            lda     #$9f
FE70  B70403                          sta     VDC_IRQ_SCANLINE
FE73  8601                            lda     #%00000001
FE75  B70401                          sta     VDC_CR          ; enable irq's for vdc
                      
                      ; cleary binary ready flag
FE78  0F02                            clr     binary_ready
                      
                      ; sound
FE7A  8D21                            bsr     sound_reset
                      
                      ; enable irq's
FE7C  1CEF                            andcc   #%11101111
                      
                      ; "main" loop
FE7E  13              loop            sync
FE7F  9602                            lda     binary_ready
FE81  27FB                            beq     loop
                      
                      ; disable logo and jump to start of binary
FE83  1A10            _jump           orcc    #%00010000              ; disable irq's
FE85  7F0481                          clr     CORE_CR                 ; no irq when new bin inserted
FE88  5F                              clrb
FE89  F70407          1               stb     VDC_CURRENT_SPRITE
FE8C  B6041A                          lda     VDC_SPRITE_FLAGS
FE8F  84FE                            anda    #%11111110
FE91  B7041A                          sta     VDC_SPRITE_FLAGS
FE94  5C                              incb
FE95  C108                            cmpb    #$08
FE97  26F0                            bne     1b
FE99  6E9F0001                        jmp     [execution_addr]
                      
FE9D  3632            sound_reset     pshu    y,x,a
FE9F  8E0040                          ldx     #$0040
FEA2  108E0500                        ldy     #SID0_F                 ; start of sound (sid 0)
FEA6  6FA0            1               clr     ,y+
FEA8  301F                            leax    -1,x
FEAA  26FA                            bne     1b
FEAC  867F                            lda     #$7f                    ; mixer at half volume
FEAE  8E0008                          ldx     #$0008                  ; 8 mixing registers in total
FEB1  108E0580                        ldy     #MIX_SID0_LEFT          ; start of io mixer
FEB5  A7A0            2               sta     ,y+
FEB7  301F                            leax    -1,x
FEB9  26FA                            bne     2b
FEBB  860F                            lda     #$0f                    ; set sid volumes to max
FEBD  B7051B                          sta     SID0_V                  ; sid 0 volume
FEC0  B7053B                          sta     SID1_V                  ; sid 1 volume
FEC3  3732                            pulu    y,x,a
FEC5  39                              rts
                      
FEC6  7040071C        logo_data       fcb     112,64,%111,$1c         ; icon top left
FECA  7840071D                        fcb     120,64,%111,$1d         ; icon top right
FECE  7048071E                        fcb     112,72,%111,$1e         ; icon bottom left
FED2  7848071F                        fcb     120,72,%111,$1f         ; icon bottom right
FED6  6B50076C                        fcb     107,80,%111,$6c         ; l
FEDA  70500769                        fcb     112,80,%111,$69         ; i
FEDE  7650076D                        fcb     118,80,%111,$6d         ; m
FEE2  7E500765                        fcb     126,80,%111,$65         ; e
                      
FEE6  B60440          exc_irq         lda     $0440                   ; load timer controller register
FEE9  2716                            beq     exc_vdc
FEEB  8E0210                          ldx     #VECTOR_TIMER0_INDIRECT ; it is one of the timers, load x with 1st vector indirect
FEEE  8601                            lda     #%00000001
FEF0  B50440          exc_test_tim    bita    $0440
FEF3  2705                            beq     exc_next_tim
FEF5  B70440                          sta     $0440                   ; acknowledge interrupt
FEF8  6E94                            jmp     [,x]
FEFA  48              exc_next_tim    asla
FEFB  271C                            beq     exc_irq_end
FEFD  3002                            leax    2,x                     ; load x with address of next vector
FEFF  20EF                            bra     exc_test_tim
FF01  B60400          exc_vdc         lda     VDC_SR
FF04  2708                            beq     exc_core
FF06  B70400                          sta     VDC_SR
FF09  8E0220                          ldx     #VECTOR_VDC_INDIRECT
FF0C  6E94                            jmp     [,x]
FF0E  B60480          exc_core        lda     CORE_SR                 ; triggered when binary inserted
FF11  2706                            beq     exc_irq_end
FF13  B70480                          sta     CORE_SR
FF16  7EFF4C                          jmp     core_interrupt
FF19  3B              exc_irq_end     rti
                      
FF1A  9600            vdc_interrupt   lda     logo_animation
FF1C  4C                              inca
FF1D  8180                            cmpa    #$80
FF1F  2606                            bne     1f                      ; didn't reach #$80
FF21  8601                            lda     #%00000001              ; we did reach #$80
FF23  B70481                          sta     CORE_CR                 ; activate irq's for binary insert
                                                                      ; this makes sure letters wobble at least 1 time
FF26  4F                              clra
                      
FF27  9700            1               sta     logo_animation
                      
FF29  C604                            ldb     #$04                    ; set current sprite to 4
FF2B  F70407          2               stb     VDC_CURRENT_SPRITE
                      
FF2E  8650                            lda     #80                     ; set default y value
FF30  B70419                          sta     VDC_SPRITE_Y
                      
FF33  B60418                          lda     VDC_SPRITE_X            ; load its x register
FF36  9000                            suba    logo_animation          ; subtract the ani var
FF38  8008                            suba    #$08
FF3A  2203                            bhi     3f                      ; if difference larger than 8 keep its y value
FF3C  7A0419                          dec     VDC_SPRITE_Y
FF3F  5C              3               incb
FF40  C108                            cmpb    #$08
FF42  26E7                            bne     2b
                      
FF44  B60488                          lda     CORE_INPUT_0            ; use keyboard input to change screen background color
FF47  B70404                          sta     VDC_BG_COLOR
FF4A  3B                              rti
                      
FF4B  3B              timer_interrupt rti
                      
                      ; handle loading of binary and jump to code if successful
FF4C                  core_interrupt
FF4C  B60484                          lda     CORE_FILE_DATA          ; first value $00?
FF4F  2634                            bne     core_int_end            ; no
FF51  B60484          1               lda     CORE_FILE_DATA          ; yes, start chunk
FF54  F60484                          ldb     CORE_FILE_DATA
FF57  1F02                            tfr     d,y                     ; y holds size
FF59  B60484                          lda     CORE_FILE_DATA
FF5C  F60484                          ldb     CORE_FILE_DATA
FF5F  1F01                            tfr     d,x                     ; x holds memory location
FF61  B60484          2               lda     CORE_FILE_DATA          ; get a byte
FF64  A780                            sta     ,x+
FF66  313F                            leay    -1,y
FF68  26F7                            bne     2b                      ; finished?
FF6A  B60484                          lda     CORE_FILE_DATA
FF6D  27E2                            beq     1b                      ; is $00 start another chunk
FF6F  81FF                            cmpa    #$ff
FF71  2612                            bne     core_int_end            ; not equal
FF73  B60484                          lda     CORE_FILE_DATA
FF76  260D                            bne     core_int_end            ; not equal to zero
FF78  B60484                          lda     CORE_FILE_DATA
FF7B  2608                            bne     core_int_end            ; not equal to zero
FF7D  B60484                          lda     CORE_FILE_DATA
FF80  F60484                          ldb     CORE_FILE_DATA          ; d now contains execution address
FF83  DD01                            std     execution_addr          ; store it
                                                                      ; how to
FF85  3B              core_int_end    rti
                      
FF86  6E9F0208        1               jmp     [VECTOR_IRQ_INDIRECT]
                      
FFF0                                  org     $fff0
FFF0  0000            vectors         fdb     $0000
FFF2  0000                            fdb     $0000
FFF4  0000                            fdb     $0000
FFF6  0000                            fdb     $0000
FFF8  FF86                            fdb     1b              ; irq vector
FFFA  0000                            fdb     $0000
FFFC  0000                            fdb     $0000
FFFE  FE11                            fdb     reset           ; reset vector
