                      ;-----------------------------------------------------------------------
                      ; rom.s (assembles with asm6809)
                      ; lime
                      ;
                      ; Copyright © 2025 elmerucr. All rights reserved.
                      ;-----------------------------------------------------------------------
                      
0000                                  include "definitions.i"
                      ; ----------------------------------------------------------------------
                      ; definitions.i
                      ; lime
                      ;
                      ; Copyright © 2025 elmerucr. All rights reserved.
                      ; ----------------------------------------------------------------------
                      
0200                  VECTOR_ILLOP_INDIRECT   equ     $0200
0202                  VECTOR_SWI3_INDIRECT    equ     $0202
0204                  VECTOR_SWI2_INDIRECT    equ     $0204
0206                  VECTOR_FIRQ_INDIRECT    equ     $0206
0208                  VECTOR_IRQ_INDIRECT     equ     $0208
020A                  VECTOR_SWI_INDIRECT     equ     $020a
020C                  VECTOR_NMI_INDIRECT     equ     $020c
                      ; $020e unused and reserved
0210                  VECTOR_TIMER0_INDIRECT  equ     $0210
0212                  VECTOR_TIMER1_INDIRECT  equ     $0212
0214                  VECTOR_TIMER2_INDIRECT  equ     $0214
0216                  VECTOR_TIMER3_INDIRECT  equ     $0216
0218                  VECTOR_TIMER4_INDIRECT  equ     $0218
021A                  VECTOR_TIMER5_INDIRECT  equ     $021a
021C                  VECTOR_TIMER6_INDIRECT  equ     $021c
021E                  VECTOR_TIMER7_INDIRECT  equ     $021e
0220                  VECTOR_VDC_INDIRECT     equ     $0220
                      
                      ; vdc (video display controller)
0400                  VDC_SR                  equ     $0400
0401                  VDC_CR                  equ     $0401
0402                  VDC_CURRENT_SCANLINE    equ     $0402
0403                  VDC_IRQ_SCANLINE        equ     $0403
0404                  VDC_BG_COLOR            equ     $0404
0406                  VDC_CURRENT_LAYER       equ     $0406
0407                  VDC_CURRENT_SPRITE      equ     $0407
0418                  VDC_SPRITE_X            equ     $0418
0419                  VDC_SPRITE_Y            equ     $0419
                      
0800                  VDC_TILESET_0           equ     $0800
1000                  VDC_TILESET_1           equ     $1000
2000                  VDC_LAYER_0             equ     $2000
2400                  VDC_LAYER_1             equ     $2400
2800                  VDC_LAYER_2             equ     $2800
2C00                  VDC_LAYER_3             equ     $2c00
                      
                      ; core
0480                  CORE_SR                 equ     $0480
0481                  CORE_CR                 equ     $0481
0482                  CORE_ROMS               equ     $0482
0488                  CORE_INPUT_0            equ     $0488
                      
                      ; sound devices
0500                  SID0_F                  equ     $0500
0502                  SID0_PW                 equ     $0502
051B                  SID0_V                  equ     $051b
053B                  SID1_V                  equ     $053b
0580                  MIX_SID0_LEFT           equ     $0580
0581                  MIX_SID0_RIGHT          equ     $0581
0582                  MIX_SID1_LEFT           equ     $0582
0583                  MIX_SID1_RIGHT          equ     $0583
0584                  MIX_ANA0_LEFT           equ     $0584
0585                  MIX_ANA0_RIGHT          equ     $0585
0586                  MIX_ANA1_LEFT           equ     $0586
0587                  MIX_ANA1_RIGHT          equ     $0587
                      
0000                  logo_animation  equ     $00
                      
0000                                  setdp   $00             ; assembler now assumes dp = $00 and
                                                              ; uses dp addressing when appropriate
                      
FE00                                  org     $fe00
                      
FE00  6C696D6520726F6D2076302E3620323032353033303100                 fcn     "lime rom v0.6 20250301"
FE17  10CE0200        reset           lds     #$0200          ; sets system stackpointer + enables nmi
FE1B  CEFE00                          ldu     #$fe00          ; sets user stackpointer
                      
FE1E  B60482                          lda     CORE_ROMS       ; make font visible to cpu
FE21  8A02                            ora     #%00000010
FE23  B70482                          sta     CORE_ROMS
                      
FE26  8E1000                          ldx     #VDC_TILESET_1  ; copy font from rom to ram
FE29  A684            1               lda     ,x
FE2B  A780                            sta     ,x+
FE2D  8C2000                          cmpx    #VDC_TILESET_1+$1000
FE30  26F7                            bne     1b
                      
FE32  B60482                          lda     CORE_ROMS               ; only rom remains visible to cpu
FE35  84FD                            anda    #%11111101
FE37  B70482                          sta     CORE_ROMS
                      
                      ; init logo
FE3A  8EFEAC                          ldx     #logo_data              ; x points to start of logo data
FE3D  5F                              clrb                            ; b holds current sprite
FE3E  F70407          1               stb     VDC_CURRENT_SPRITE      ; set active sprite
FE41  108E0418                        ldy     #VDC_SPRITE_X           ; y points to start of sprite registers
FE45  A680            2               lda     ,x+                     ; copy data
FE47  A7A0                            sta     ,y+
FE49  108C041C                        cmpy    #VDC_SPRITE_X+4         ; did we copy 4 values?
FE4D  26F6                            bne     2b                      ; not yet, continue at 2
FE4F  5C                              incb                            ; we did, set next active sprite
FE50  8CFECC                          cmpx    #logo_data+32           ; did we reach end of data?
FE53  26E9                            bne     1b                      ; no, continue at 1
                      
FE55  0F00                            clr     logo_animation
                      
                      ; set jump vectors
FE57  8EFECC                          ldx     #exc_irq
FE5A  BF0208                          stx     VECTOR_IRQ_INDIRECT
FE5D  8EFF19                          ldx     #timer_interrupt
FE60  108E0210                        ldy     #VECTOR_TIMER0_INDIRECT
FE64  AFA1            1               stx     ,y++
FE66  108C0220                        cmpy    #VECTOR_TIMER0_INDIRECT+16
FE6A  26F8                            bne     1b
FE6C  8EFEF5                          ldx     #vdc_interrupt
FE6F  BF0220                          stx     VECTOR_VDC_INDIRECT
                      
                      ; set raster irq on scanline 159
FE72  869F                            lda     #$9f
FE74  B70403                          sta     VDC_IRQ_SCANLINE
FE77  8601                            lda     #%00000001
FE79  B70401                          sta     VDC_CR
                      
FE7C  8D05                            bsr     sound_reset
                      
                      ; enable irq's
FE7E  1CEF                            andcc   #%11101111
                      
                      ; "main" loop
FE80  13              loop            sync
FE81  20FD                            bra     loop
                      
FE83  3632            sound_reset     pshu    y,x,a
FE85  8E0040                          ldx     #$0040
FE88  108E0500                        ldy     #SID0_F                 ; start of sound (sid 0)
FE8C  6FA0            1               clr     ,y+
FE8E  301F                            leax    -1,x
FE90  26FA                            bne     1b
FE92  867F                            lda     #$7f                    ; mixer at half volume
FE94  8E0008                          ldx     #$0008                  ; 8 mixing registers in total
FE97  108E0580                        ldy     #MIX_SID0_LEFT          ; start of io mixer
FE9B  A7A0            2               sta     ,y+
FE9D  301F                            leax    -1,x
FE9F  26FA                            bne     2b
FEA1  860F                            lda     #$0f                    ; set sid volumes to max
FEA3  B7051B                          sta     SID0_V                  ; sid 0 volume
FEA6  B7053B                          sta     SID1_V                  ; sid 1 volume
FEA9  3732                            pulu    y,x,a
FEAB  39                              rts
                      
FEAC  7040071C        logo_data       fcb     112,64,%111,$1c         ; icon top left
FEB0  7840071D                        fcb     120,64,%111,$1d         ; icon top right
FEB4  7048071E                        fcb     112,72,%111,$1e         ; icon bottom left
FEB8  7848071F                        fcb     120,72,%111,$1f         ; icon bottom right
FEBC  6B50076C                        fcb     107,80,%111,$6c         ; l
FEC0  70500769                        fcb     112,80,%111,$69         ; i
FEC4  7650076D                        fcb     118,80,%111,$6d         ; m
FEC8  7E500765                        fcb     126,80,%111,$65         ; e
                      
FECC  B60440          exc_irq         lda     $0440                   ; load timer controller register
FECF  2716                            beq     exc_vdc
FED1  8E0210                          ldx     #VECTOR_TIMER0_INDIRECT ; it is one of the timers, load x with 1st vector indirect
FED4  8601                            lda     #%00000001
FED6  B50440          exc_test_tim    bita    $0440
FED9  2705                            beq     exc_next_tim
FEDB  B70440                          sta     $0440                   ; acknowledge interrupt
FEDE  6E94                            jmp     [,x]
FEE0  48              exc_next_tim    asla
FEE1  2711                            beq     exc_irq_end
FEE3  3002                            leax    2,x                     ; load x with address of next vector
FEE5  20EF                            bra     exc_test_tim
FEE7  B60400          exc_vdc         lda     VDC_SR
FEEA  2708                            beq     exc_irq_end
FEEC  B70400                          sta     VDC_SR
FEEF  8E0220                          ldx     #VECTOR_VDC_INDIRECT
FEF2  6E94                            jmp     [,x]
FEF4  3B              exc_irq_end     rti
                      
FEF5  0C00            vdc_interrupt   inc     logo_animation
                      
FEF7  C604                            ldb     #$04                    ; set current sprite to 4
FEF9  F70407          1               stb     VDC_CURRENT_SPRITE
                      
FEFC  8650                            lda     #80                     ; set default y value
FEFE  B70419                          sta     VDC_SPRITE_Y
                      
FF01  B60418                          lda     VDC_SPRITE_X            ; load its x register
FF04  9000                            suba    logo_animation          ; subtract the ani var
FF06  8008                            suba    #$08
FF08  2203                            bhi     2f                      ; if difference larger than 8 keep its y value
FF0A  7A0419                          dec     VDC_SPRITE_Y
FF0D  5C              2               incb
FF0E  C108                            cmpb    #$08
FF10  26E7                            bne     1b
                      
FF12  B60488                          lda     CORE_INPUT_0            ; use keyboard input to change screen background color
FF15  B70404                          sta     VDC_BG_COLOR
FF18  3B                              rti
                      
FF19  3B              timer_interrupt rti
                      
FF1A  6E9F0208        1               jmp     [VECTOR_IRQ_INDIRECT]
                      
FFF0                                  org     $fff0
FFF0  0000            vectors         fdb     $0000
FFF2  0000                            fdb     $0000
FFF4  0000                            fdb     $0000
FFF6  0000                            fdb     $0000
FFF8  FF1A                            fdb     1b              ; irq vector
FFFA  0000                            fdb     $0000
FFFC  0000                            fdb     $0000
FFFE  FE17                            fdb     reset           ; reset vector
