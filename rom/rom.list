                      ;-----------------------------------------------------------------------
                      ; rom.s (assembles with asm6809)
                      ; lime
                      ;
                      ; Copyright © 2025 elmerucr. All rights reserved.
                      ;-----------------------------------------------------------------------
                      
                      ; rom 0.9 20250603
                      ;
                      ; adding rnd routine
                      
                      ; rom 0.8 20250420
                      ;
                      ;
                      
0000                                  include "definitions.i"
                      ;-----------------------------------------------------------------------
                      ; definitions.i
                      ; lime
                      ;
                      ; Copyright © 2025 elmerucr. All rights reserved.
                      ;-----------------------------------------------------------------------
                      
0200                  VECTOR_ILLOP_INDIRECT   equ     $0200
0202                  VECTOR_SWI3_INDIRECT    equ     $0202
0204                  VECTOR_SWI2_INDIRECT    equ     $0204
0206                  VECTOR_FIRQ_INDIRECT    equ     $0206
0208                  VECTOR_IRQ_INDIRECT     equ     $0208
020A                  VECTOR_SWI_INDIRECT     equ     $020a
020C                  VECTOR_NMI_INDIRECT     equ     $020c
                      ; $020e unused and reserved
0210                  VECTOR_TIMER0_INDIRECT  equ     $0210
0212                  VECTOR_TIMER1_INDIRECT  equ     $0212
0214                  VECTOR_TIMER2_INDIRECT  equ     $0214
0216                  VECTOR_TIMER3_INDIRECT  equ     $0216
0218                  VECTOR_TIMER4_INDIRECT  equ     $0218
021A                  VECTOR_TIMER5_INDIRECT  equ     $021a
021C                  VECTOR_TIMER6_INDIRECT  equ     $021c
021E                  VECTOR_TIMER7_INDIRECT  equ     $021e
0220                  VECTOR_VDC_INDIRECT     equ     $0220
                      
                      ; vdc (video display controller)
0400                  VDC_SR                  equ     $0400
0401                  VDC_CR                  equ     $0401
0402                  VDC_CURRENT_SCANLINE    equ     $0402
0403                  VDC_IRQ_SCANLINE        equ     $0403
0404                  VDC_BG_COLOR            equ     $0404
0405                  VDC_CURRENT_PALETTE     equ     $0405
0406                  VDC_CURRENT_LAYER       equ     $0406
0407                  VDC_CURRENT_SPRITE      equ     $0407
                      
0408                  VDC_PALETTE_ALPHA       equ     $0408
0409                  VDC_PALETTE_RED         equ     $0409
040A                  VDC_PALETTE_GREEN       equ     $040a
040B                  VDC_PALETTE_BLUE        equ     $040b
                      
0410                  VDC_LAYER_X             equ     $0410
0411                  VDC_LAYER_Y             equ     $0411
0412                  VDC_LAYER_FLAGS0        equ     $0412
0413                  VDC_LAYER_FLAGS1        equ     $0413
0418                  VDC_LAYER_COLOR0        equ     $0418
0419                  VDC_LAYER_COLOR1        equ     $0419
041A                  VDC_LAYER_COLOR2        equ     $041a
041B                  VDC_LAYER_COLOR3        equ     $041b
                      
0420                  VDC_SPRITE_X            equ     $0420
0421                  VDC_SPRITE_Y            equ     $0421
0422                  VDC_SPRITE_FLAGS0       equ     $0422
0423                  VDC_SPRITE_FLAGS1       equ     $0423
0424                  VDC_SPRITE_INDEX        equ     $0424
0428                  VDC_SPRITE_COLOR0       equ     $0428
0429                  VDC_SPRITE_COLOR1       equ     $0429
042A                  VDC_SPRITE_COLOR2       equ     $042a
042B                  VDC_SPRITE_COLOR3       equ     $042b
                      
0800                  VDC_TILESET0            equ     $0800
1000                  VDC_TILESET1            equ     $1000
2000                  VDC_LAYER0              equ     $2000
2400                  VDC_LAYER1              equ     $2400
2800                  VDC_LAYER2              equ     $2800
2C00                  VDC_LAYER3              equ     $2c00
                      
                      ; timer
0440                  TIMER_SR                equ     $0440
0441                  TIMER_CR                equ     $0441
0450                  TIMER0_BPM              equ     $0450
0452                  TIMER1_BPM              equ     $0452
0454                  TIMER2_BPM              equ     $0454
0456                  TIMER3_BPM              equ     $0456
0458                  TIMER4_BPM              equ     $0458
045A                  TIMER5_BPM              equ     $045a
045C                  TIMER6_BPM              equ     $045c
045E                  TIMER7_BPM              equ     $045e
                      
                      ; core
0480                  CORE_SR                 equ     $0480
0481                  CORE_CR                 equ     $0481
0482                  CORE_ROMS               equ     $0482
0484                  CORE_FILE_DATA          equ     $0484
0488                  CORE_INPUT0             equ     $0488
                      
                      ; sound devices
0500                  SID0_F                  equ     $0500
0502                  SID0_PW                 equ     $0502
051B                  SID0_V                  equ     $051b
053B                  SID1_V                  equ     $053b
0580                  MIX_SID0_LEFT           equ     $0580
0581                  MIX_SID0_RIGHT          equ     $0581
0582                  MIX_SID1_LEFT           equ     $0582
0583                  MIX_SID1_RIGHT          equ     $0583
0584                  MIX_ANA0_LEFT           equ     $0584
0585                  MIX_ANA0_RIGHT          equ     $0585
0586                  MIX_ANA1_LEFT           equ     $0586
0587                  MIX_ANA1_RIGHT          equ     $0587
                      
                      ; general
3000                  RAM_START               equ     $3000
FE00                  ROM_START               equ     $fe00
                      
0000                                  setdp   $00
                      
0000                  logo_animation  equ     $00
0001                  execution_addr  equ     $01
0003                  binary_ready    equ     $03
00FC                  rnda            equ     $fc
00FD                  rndb            equ     $fd
00FE                  rndc            equ     $fe
00FF                  rndx            equ     $ff
                      
0000                                  setdp   $00             ; assembler now assumes dp = $00 and
                                                              ; uses dp addressing when appropriate
                      
FE00                                  org     $fe00
                      
FE00 726F6D20302E3920                 fcn     "rom 0.9 20250603"
     3230323530363033
     00
FE11 10CE0200         reset           lds     #$0200          ; sets system stackpointer + enables nmi
FE15 CEFE00                           ldu     #$fe00          ; sets user stackpointer
                      
FE18 B60482                           lda     CORE_ROMS       ; make font visible to cpu
FE1B 8A02                             ora     #%00000010
FE1D B70482                           sta     CORE_ROMS
                      
FE20 8E1000                           ldx     #VDC_TILESET1   ; copy font from rom to ram
FE23 A684             1               lda     ,x
FE25 A780                             sta     ,x+
FE27 8C2000                           cmpx    #VDC_TILESET1+$1000
FE2A 26F7                             bne     1b
                      
FE2C B60482                           lda     CORE_ROMS               ; turn off font rom
FE2F 84FD                             anda    #%11111101
FE31 B70482                           sta     CORE_ROMS
                      
                      ; init logo
FE34 8EFECD                           ldx     #logo_data              ; x points to start of logo data
FE37 5F                               clrb                            ; b holds current sprite
FE38 F70407           1               stb     VDC_CURRENT_SPRITE      ; set active sprite
FE3B 108E0420                         ldy     #VDC_SPRITE_X           ; y points to start of sprite registers
FE3F A680             2               lda     ,x+                     ; copy data
FE41 A7A0                             sta     ,y+
FE43 108C0425                         cmpy    #VDC_SPRITE_X+5         ; did we copy 5 values?
FE47 26F6                             bne     2b                      ; not yet, continue at 2
FE49 5C                               incb                            ; we did, set next active sprite
FE4A 8CFEF5                           cmpx    #logo_data+40           ; did we reach end of data?
FE4D 26E9                             bne     1b                      ; no, continue at 1
                      
                      ; set variable for letter wobble
FE4F 8640                             lda     #$40
FE51 9700                             sta     logo_animation
                      
                      ; set jump vectors
FE53 8EFEF5                           ldx     #exc_irq
FE56 BF0208                           stx     VECTOR_IRQ_INDIRECT
FE59 8EFF64                           ldx     #timer_interrupt
FE5C 108E0210                         ldy     #VECTOR_TIMER0_INDIRECT
FE60 AFA1             1               stx     ,y++
FE62 108C0220                         cmpy    #VECTOR_TIMER0_INDIRECT+16
FE66 26F8                             bne     1b
FE68 8EFF29                           ldx     #vdc_interrupt
FE6B BF0220                           stx     VECTOR_VDC_INDIRECT
                      
                      ; set raster irq on scanline 159
FE6E 869F                             lda     #$9f
FE70 B70403                           sta     VDC_IRQ_SCANLINE
FE73 8601                             lda     #%00000001
FE75 B70401                           sta     VDC_CR          ; enable irq's for vdc
                      
                      ; cleary binary ready flag
FE78 0F03                             clr     binary_ready
                      
                      ; sound
FE7A 8D2C                             bsr     sound_reset
                      
                      ; enable irq's
FE7C 1CEF                             andcc   #%11101111
                      
                      ; clear rnd variables
FE7E 0FFC                             clr     rnda
FE80 0FFD                             clr     rndb
FE82 0FFE                             clr     rndc
FE84 0FFF                             clr     rndx
                      
                      ; "main" loop
FE86 13               loop            sync
FE87 9603                             lda     binary_ready
FE89 27FB                             beq     loop
                      
                      ; disable logo and jump to start of binary
FE8B 1A10             _jump           orcc    #%00010000              ; disable irq's
FE8D 7F0481                           clr     CORE_CR                 ; no irq when new bin inserted
FE90 7F0401                           clr     VDC_CR
FE93 5F                               clrb
FE94 F70407           1               stb     VDC_CURRENT_SPRITE
FE97 B60422                           lda     VDC_SPRITE_FLAGS0
FE9A 84FE                             anda    #%11111110
FE9C B70422                           sta     VDC_SPRITE_FLAGS0
FE9F 5C                               incb
FEA0 C108                             cmpb    #$08
FEA2 26F0                             bne     1b
FEA4 6E9F0001                         jmp     [execution_addr]
                      
FEA8 3626             sound_reset     pshu    y,b,a
FEAA C640                             ldb     #$40
FEAC 108E0500                         ldy     #SID0_F                 ; start of sound (sid 0)
FEB0 6FA0             1               clr     ,y+
FEB2 5A                               decb
FEB3 26FB                             bne     1b
FEB5 867F                             lda     #$7f                    ; mixer at half volume
FEB7 C608                             ldb     #$08                    ; 8 mixing registers in total
FEB9 108E0580                         ldy     #MIX_SID0_LEFT          ; start of io mixer
FEBD A7A0             2               sta     ,y+
FEBF 5A                               decb
FEC0 26FB                             bne     2b
FEC2 860F                             lda     #$0f                    ; set sid volumes to max
FEC4 B7051B                           sta     SID0_V                  ; sid 0 volume
FEC7 B7053B                           sta     SID1_V                  ; sid 1 volume
FECA 3726                             pulu    y,b,a
FECC 39                               rts
                      
FECD 704007001C       logo_data       fcb     112,64,%111,0,$1c               ; icon top left
FED2 784007001D                       fcb     120,64,%111,0,$1d               ; icon top right
FED7 704807001E                       fcb     112,72,%111,0,$1e               ; icon bottom left
FEDC 784807001F                       fcb     120,72,%111,0,$1f               ; icon bottom right
FEE1 6B5007006C                       fcb     107,80,%111,0,$6c               ; l
FEE6 7050070069                       fcb     112,80,%111,0,$69               ; i
FEEB 765007006D                       fcb     118,80,%111,0,$6d               ; m
FEF0 7E50070065                       fcb     126,80,%111,0,$65               ; e
                      
FEF5 B60440           exc_irq         lda     TIMER_SR                ; load timer status register
FEF8 2716                             beq     exc_vdc
FEFA 8E0210                           ldx     #VECTOR_TIMER0_INDIRECT ; it is one of the timers, load x with 1st vector indirect
FEFD 8601                             lda     #%00000001
FEFF B50440           exc_test_tim    bita    TIMER_SR
FF02 2705                             beq     exc_next_tim
FF04 B70440                           sta     TIMER_SR                ; acknowledge interrupt
FF07 6E94                             jmp     [,x]
FF09 48               exc_next_tim    asla
FF0A 271C                             beq     exc_irq_end
FF0C 3002                             leax    2,x                     ; load x with address of next vector
FF0E 20EF                             bra     exc_test_tim
FF10 B60400           exc_vdc         lda     VDC_SR
FF13 2708                             beq     exc_core
FF15 B70400                           sta     VDC_SR
FF18 8E0220                           ldx     #VECTOR_VDC_INDIRECT
FF1B 6E94                             jmp     [,x]
FF1D B60480           exc_core        lda     CORE_SR                 ; triggered when binary inserted
FF20 2706                             beq     exc_irq_end
FF22 B70480                           sta     CORE_SR
FF25 7EFF65                           jmp     core_interrupt
FF28 3B               exc_irq_end     rti
                      
FF29 B60407           vdc_interrupt   lda     VDC_CURRENT_SPRITE
FF2C 3402                             pshs    a
FF2E 9600                             lda     logo_animation
FF30 4C                               inca
FF31 8190                             cmpa    #$90
FF33 2606                             bne     1f                      ; didn't reach #$90
FF35 8601                             lda     #%00000001              ; we did reach #$90
FF37 B70481                           sta     CORE_CR                 ; activate irq's for binary insert
                                                                      ; this makes sure letters wobble at least 1 time
FF3A 4F                               clra
                      
FF3B 9700             1               sta     logo_animation
                      
FF3D C604                             ldb     #$04                    ; set current sprite to 4
FF3F F70407           2               stb     VDC_CURRENT_SPRITE
                      
FF42 8650                             lda     #80                     ; set default y value
FF44 B70421                           sta     VDC_SPRITE_Y
                      
FF47 B60420                           lda     VDC_SPRITE_X            ; load its x register
FF4A 9000                             suba    logo_animation          ; subtract the ani var
FF4C 8008                             suba    #$08
FF4E 2203                             bhi     3f                      ; if difference larger than 8 keep its y value
FF50 7A0421                           dec     VDC_SPRITE_Y
FF53 5C               3               incb
FF54 C108                             cmpb    #$08
FF56 26E7                             bne     2b
                      
FF58 B60488                           lda     CORE_INPUT0             ; use controller input to change screen background color
FF5B B70404                           sta     VDC_BG_COLOR
FF5E 3502                             puls    a
FF60 B70407                           sta     VDC_CURRENT_SPRITE
FF63 3B                               rti
                      
FF64 3B               timer_interrupt rti
                      
                      ; handle loading of binary and jump to code if successful
FF65 B60484           core_interrupt  lda     CORE_FILE_DATA          ; first value $00?
FF68 2636                             bne     core_int_end            ; no
FF6A B60484           1               lda     CORE_FILE_DATA          ; yes, start chunk
FF6D F60484                           ldb     CORE_FILE_DATA
FF70 1F02                             tfr     d,y                     ; y holds size
FF72 B60484                           lda     CORE_FILE_DATA
FF75 F60484                           ldb     CORE_FILE_DATA
FF78 1F01                             tfr     d,x                     ; x holds memory location
FF7A B60484           2               lda     CORE_FILE_DATA          ; get a byte
FF7D A780                             sta     ,x+
FF7F 313F                             leay    -1,y
FF81 26F7                             bne     2b                      ; finished?
FF83 B60484                           lda     CORE_FILE_DATA
FF86 27E2                             beq     1b                      ; is $00 start another chunk
FF88 81FF                             cmpa    #$ff
FF8A 2614                             bne     core_int_end            ; not equal
FF8C B60484                           lda     CORE_FILE_DATA
FF8F 260F                             bne     core_int_end            ; not equal to zero
FF91 B60484                           lda     CORE_FILE_DATA
FF94 260A                             bne     core_int_end            ; not equal to zero
FF96 B60484                           lda     CORE_FILE_DATA
FF99 F60484                           ldb     CORE_FILE_DATA          ; d now contains execution address
FF9C DD01                             std     execution_addr          ; store it
FF9E 0C03                             inc     binary_ready            ; %00000001
FFA0 3B               core_int_end    rti
                      
                      ; prng / rnd routine, value contained in ac
                      ; see:
                      ; c version:
                      ;
                      ;
                      ;
                      ;
                      ;
FFA1 0CFF             rnd_impl        inc     rndx
FFA3 96FC                             lda     rnda
FFA5 98FE                             eora    rndc
FFA7 98FF                             eora    rndx
FFA9 97FC                             sta     rnda
FFAB 9BFD                             adda    rndb
FFAD 97FD                             sta     rndb
FFAF 44                               lsra
FFB0 9BFE                             adda    rndc
FFB2 98FC                             eora    rnda
FFB4 97FE                             sta     rndc
FFB6 39                               rts
                      
FFB7 6E9F0208         1               jmp     [VECTOR_IRQ_INDIRECT]
                      
FFED                                  org     $fff0 - (vectors - rnd)
                      
FFED 7EFFA1           rnd             jmp     rnd_impl
                      
FFF0 0000             vectors         fdb     $0000
FFF2 0000                             fdb     $0000
FFF4 0000                             fdb     $0000
FFF6 0000                             fdb     $0000
FFF8 FFB7                             fdb     1b              ; irq vector
FFFA 0000                             fdb     $0000
FFFC 0000                             fdb     $0000
FFFE FE11                             fdb     reset           ; reset vector
