                      ;-----------------------------------------------------------------------
                      ; rom.s (assembles with asm6809)
                      ; lime
                      ;
                      ; Copyright © 2025 elmerucr. All rights reserved.
                      ;-----------------------------------------------------------------------
                      
                      ; rom 0.9 20250603
                      ; adding rnd routine
                      
                      ; rom 0.8 20250420
                      ;
                      ;
                      
0000                                  include "definitions.i"
                      ;-----------------------------------------------------------------------
                      ; definitions.i
                      ; lime
                      ;
                      ; Copyright © 2025 elmerucr. All rights reserved.
                      ;-----------------------------------------------------------------------
                      
0200                  VECTOR_ILLOP_INDIRECT   equ     $0200
0202                  VECTOR_SWI3_INDIRECT    equ     $0202
0204                  VECTOR_SWI2_INDIRECT    equ     $0204
0206                  VECTOR_FIRQ_INDIRECT    equ     $0206
0208                  VECTOR_IRQ_INDIRECT     equ     $0208
020A                  VECTOR_SWI_INDIRECT     equ     $020a
020C                  VECTOR_NMI_INDIRECT     equ     $020c
                      ; $020e unused and reserved
0210                  VECTOR_TIMER0_INDIRECT  equ     $0210
0212                  VECTOR_TIMER1_INDIRECT  equ     $0212
0214                  VECTOR_TIMER2_INDIRECT  equ     $0214
0216                  VECTOR_TIMER3_INDIRECT  equ     $0216
0218                  VECTOR_TIMER4_INDIRECT  equ     $0218
021A                  VECTOR_TIMER5_INDIRECT  equ     $021a
021C                  VECTOR_TIMER6_INDIRECT  equ     $021c
021E                  VECTOR_TIMER7_INDIRECT  equ     $021e
0220                  VECTOR_VDC_INDIRECT     equ     $0220
                      
                      ; vdc (video display controller)
0400                  VDC_SR                  equ     $0400
0401                  VDC_CR                  equ     $0401
0402                  VDC_CURRENT_SCANLINE    equ     $0402
0403                  VDC_IRQ_SCANLINE        equ     $0403
0404                  VDC_BG_COLOR            equ     $0404
0405                  VDC_CURRENT_PALETTE     equ     $0405
0406                  VDC_CURRENT_LAYER       equ     $0406
0407                  VDC_CURRENT_SPRITE      equ     $0407
                      
0408                  VDC_PALETTE_ALPHA       equ     $0408
0409                  VDC_PALETTE_RED         equ     $0409
040A                  VDC_PALETTE_GREEN       equ     $040a
040B                  VDC_PALETTE_BLUE        equ     $040b
                      
0410                  VDC_LAYER_X             equ     $0410
0411                  VDC_LAYER_Y             equ     $0411
0412                  VDC_LAYER_FLAGS0        equ     $0412
0413                  VDC_LAYER_FLAGS1        equ     $0413
0418                  VDC_LAYER_COLOR0        equ     $0418
0419                  VDC_LAYER_COLOR1        equ     $0419
041A                  VDC_LAYER_COLOR2        equ     $041a
041B                  VDC_LAYER_COLOR3        equ     $041b
                      
0420                  VDC_SPRITE_X            equ     $0420
0421                  VDC_SPRITE_Y            equ     $0421
0422                  VDC_SPRITE_FLAGS0       equ     $0422
0423                  VDC_SPRITE_FLAGS1       equ     $0423
0424                  VDC_SPRITE_INDEX        equ     $0424
0428                  VDC_SPRITE_COLOR0       equ     $0428
0429                  VDC_SPRITE_COLOR1       equ     $0429
042A                  VDC_SPRITE_COLOR2       equ     $042a
042B                  VDC_SPRITE_COLOR3       equ     $042b
                      
0800                  VDC_TILESET0            equ     $0800
1000                  VDC_TILESET1            equ     $1000
2000                  VDC_LAYER0              equ     $2000
2400                  VDC_LAYER1              equ     $2400
2800                  VDC_LAYER2              equ     $2800
2C00                  VDC_LAYER3              equ     $2c00
                      
                      ; timer
0440                  TIMER_SR                equ     $0440
0441                  TIMER_CR                equ     $0441
0450                  TIMER0_BPM              equ     $0450
0452                  TIMER1_BPM              equ     $0452
0454                  TIMER2_BPM              equ     $0454
0456                  TIMER3_BPM              equ     $0456
0458                  TIMER4_BPM              equ     $0458
045A                  TIMER5_BPM              equ     $045a
045C                  TIMER6_BPM              equ     $045c
045E                  TIMER7_BPM              equ     $045e
                      
                      ; core
0480                  CORE_SR                 equ     $0480
0481                  CORE_CR                 equ     $0481
0482                  CORE_ROMS               equ     $0482
0484                  CORE_FILE_DATA          equ     $0484
0488                  CORE_INPUT0             equ     $0488
                      
                      ; sound devices
0500                  SID0_F                  equ     $0500
0502                  SID0_PW                 equ     $0502
051B                  SID0_V                  equ     $051b
053B                  SID1_V                  equ     $053b
0580                  MIX_SID0_LEFT           equ     $0580
0581                  MIX_SID0_RIGHT          equ     $0581
0582                  MIX_SID1_LEFT           equ     $0582
0583                  MIX_SID1_RIGHT          equ     $0583
0584                  MIX_ANA0_LEFT           equ     $0584
0585                  MIX_ANA0_RIGHT          equ     $0585
0586                  MIX_ANA1_LEFT           equ     $0586
0587                  MIX_ANA1_RIGHT          equ     $0587
                      
                      ; general
3000                  RAM_START               equ     $3000
FE00                  ROM_START               equ     $fe00
                      
0000                                  setdp   $00
                      
0000                  logo_animation  equ     $00
0001                  execution_addr  equ     $01
0003                  binary_ready    equ     $03
00FC                  rnda            equ     $fc
00FD                  rndb            equ     $fd
00FE                  rndc            equ     $fe
00FF                  rndx            equ     $ff
                      
0000                                  setdp   $00             ; assembler now assumes dp = $00 and
                                                              ; uses dp addressing when appropriate
                      
FC00                                  org     $fc00
                      
FC00 726F6D20302E3130                 fcn     "rom 0.10 20250816"
     2032303235303831
     3600
FC12 10CE0200         reset           lds     #$0200          ; sets system stackpointer + enables nmi
FC16 CEFE00                           ldu     #$fe00          ; sets user stackpointer
                      
FC19 B60482                           lda     CORE_ROMS       ; make font visible to cpu
FC1C 8A02                             ora     #%00000010
FC1E B70482                           sta     CORE_ROMS
                      
FC21 8E1000                           ldx     #VDC_TILESET1   ; copy font from rom to ram
FC24 A684             1               lda     ,x
FC26 A780                             sta     ,x+
FC28 8C2000                           cmpx    #VDC_TILESET1+$1000
FC2B 26F7                             bne     1b
                      
FC2D B60482                           lda     CORE_ROMS               ; turn off font rom
FC30 84FD                             anda    #%11111101
FC32 B70482                           sta     CORE_ROMS
                      
                      ; init logo
FC35 8EFCCE                           ldx     #logo_data              ; x points to start of logo data
FC38 5F                               clrb                            ; b holds current sprite
FC39 F70407           1               stb     VDC_CURRENT_SPRITE      ; set active sprite
FC3C 108E0420                         ldy     #VDC_SPRITE_X           ; y points to start of sprite registers
FC40 A680             2               lda     ,x+                     ; copy data
FC42 A7A0                             sta     ,y+
FC44 108C0425                         cmpy    #VDC_SPRITE_X+5         ; did we copy 5 values?
FC48 26F6                             bne     2b                      ; not yet, continue at 2
FC4A 5C                               incb                            ; we did, set next active sprite
FC4B 8CFCF6                           cmpx    #logo_data+40           ; did we reach end of data?
FC4E 26E9                             bne     1b                      ; no, continue at 1
                      
                      ; set variable for letter wobble
FC50 8640                             lda     #$40
FC52 9700                             sta     logo_animation
                      
                      ; set jump vectors
FC54 8EFCF6                           ldx     #exc_irq
FC57 BF0208                           stx     VECTOR_IRQ_INDIRECT
FC5A 8EFD65                           ldx     #timer_interrupt
FC5D 108E0210                         ldy     #VECTOR_TIMER0_INDIRECT
FC61 AFA1             1               stx     ,y++
FC63 108C0220                         cmpy    #VECTOR_TIMER0_INDIRECT+16
FC67 26F8                             bne     1b
FC69 8EFD2A                           ldx     #vdc_interrupt
FC6C BF0220                           stx     VECTOR_VDC_INDIRECT
                      
                      ; set raster irq on scanline 159
FC6F 869F                             lda     #$9f
FC71 B70403                           sta     VDC_IRQ_SCANLINE
FC74 8601                             lda     #%00000001
FC76 B70401                           sta     VDC_CR          ; enable irq's for vdc
                      
                      ; cleary binary ready flag
FC79 0F03                             clr     binary_ready
                      
                      ; sound
FC7B 8D2C                             bsr     sound_reset
                      
                      ; enable irq's
FC7D 1CEF                             andcc   #%11101111
                      
                      ; clear rnd variables
FC7F 0FFC                             clr     rnda
FC81 0FFD                             clr     rndb
FC83 0FFE                             clr     rndc
FC85 0FFF                             clr     rndx
                      
                      ; "main" loop
FC87 13               loop            sync
FC88 9603                             lda     binary_ready
FC8A 27FB                             beq     loop
                      
                      ; disable logo and jump to start of binary
FC8C 1A10             _jump           orcc    #%00010000              ; disable irq's
FC8E 7F0481                           clr     CORE_CR                 ; no irq when new bin inserted
FC91 7F0401                           clr     VDC_CR
FC94 5F                               clrb
FC95 F70407           1               stb     VDC_CURRENT_SPRITE
FC98 B60422                           lda     VDC_SPRITE_FLAGS0
FC9B 84FE                             anda    #%11111110
FC9D B70422                           sta     VDC_SPRITE_FLAGS0
FCA0 5C                               incb
FCA1 C108                             cmpb    #$08
FCA3 26F0                             bne     1b
FCA5 6E9F0001                         jmp     [execution_addr]
                      
FCA9 3626             sound_reset     pshu    y,b,a
FCAB C640                             ldb     #$40
FCAD 108E0500                         ldy     #SID0_F                 ; start of sound (sid 0)
FCB1 6FA0             1               clr     ,y+
FCB3 5A                               decb
FCB4 26FB                             bne     1b
FCB6 867F                             lda     #$7f                    ; mixer at half volume
FCB8 C608                             ldb     #$08                    ; 8 mixing registers in total
FCBA 108E0580                         ldy     #MIX_SID0_LEFT          ; start of io mixer
FCBE A7A0             2               sta     ,y+
FCC0 5A                               decb
FCC1 26FB                             bne     2b
FCC3 860F                             lda     #$0f                    ; set sid volumes to max
FCC5 B7051B                           sta     SID0_V                  ; sid 0 volume
FCC8 B7053B                           sta     SID1_V                  ; sid 1 volume
FCCB 3726                             pulu    y,b,a
FCCD 39                               rts
                      
FCCE 704007001C       logo_data       fcb     112,64,%111,0,$1c               ; icon top left
FCD3 784007001D                       fcb     120,64,%111,0,$1d               ; icon top right
FCD8 704807001E                       fcb     112,72,%111,0,$1e               ; icon bottom left
FCDD 784807001F                       fcb     120,72,%111,0,$1f               ; icon bottom right
FCE2 6B5007006C                       fcb     107,80,%111,0,$6c               ; l
FCE7 7050070069                       fcb     112,80,%111,0,$69               ; i
FCEC 765007006D                       fcb     118,80,%111,0,$6d               ; m
FCF1 7E50070065                       fcb     126,80,%111,0,$65               ; e
                      
FCF6 B60440           exc_irq         lda     TIMER_SR                ; load timer status register
FCF9 2716                             beq     exc_vdc
FCFB 8E0210                           ldx     #VECTOR_TIMER0_INDIRECT ; it is one of the timers, load x with 1st vector indirect
FCFE 8601                             lda     #%00000001
FD00 B50440           exc_test_tim    bita    TIMER_SR
FD03 2705                             beq     exc_next_tim
FD05 B70440                           sta     TIMER_SR                ; acknowledge interrupt
FD08 6E94                             jmp     [,x]
FD0A 48               exc_next_tim    asla
FD0B 271C                             beq     exc_irq_end
FD0D 3002                             leax    2,x                     ; load x with address of next vector
FD0F 20EF                             bra     exc_test_tim
FD11 B60400           exc_vdc         lda     VDC_SR
FD14 2708                             beq     exc_core
FD16 B70400                           sta     VDC_SR
FD19 8E0220                           ldx     #VECTOR_VDC_INDIRECT
FD1C 6E94                             jmp     [,x]
FD1E B60480           exc_core        lda     CORE_SR                 ; triggered when binary inserted
FD21 2706                             beq     exc_irq_end
FD23 B70480                           sta     CORE_SR
FD26 7EFD66                           jmp     core_interrupt
FD29 3B               exc_irq_end     rti
                      
FD2A B60407           vdc_interrupt   lda     VDC_CURRENT_SPRITE
FD2D 3402                             pshs    a
FD2F 9600                             lda     logo_animation
FD31 4C                               inca
FD32 8190                             cmpa    #$90
FD34 2606                             bne     1f                      ; didn't reach #$90
FD36 8601                             lda     #%00000001              ; we did reach #$90
FD38 B70481                           sta     CORE_CR                 ; activate irq's for binary insert
                                                                      ; this makes sure letters wobble at least 1 time
FD3B 4F                               clra
                      
FD3C 9700             1               sta     logo_animation
                      
FD3E C604                             ldb     #$04                    ; set current sprite to 4
FD40 F70407           2               stb     VDC_CURRENT_SPRITE
                      
FD43 8650                             lda     #80                     ; set default y value
FD45 B70421                           sta     VDC_SPRITE_Y
                      
FD48 B60420                           lda     VDC_SPRITE_X            ; load its x register
FD4B 9000                             suba    logo_animation          ; subtract the ani var
FD4D 8008                             suba    #$08
FD4F 2203                             bhi     3f                      ; if difference larger than 8 keep its y value
FD51 7A0421                           dec     VDC_SPRITE_Y
FD54 5C               3               incb
FD55 C108                             cmpb    #$08
FD57 26E7                             bne     2b
                      
FD59 B60488                           lda     CORE_INPUT0             ; use controller input to change screen background color
FD5C B70404                           sta     VDC_BG_COLOR
FD5F 3502                             puls    a
FD61 B70407                           sta     VDC_CURRENT_SPRITE
FD64 3B                               rti
                      
FD65 3B               timer_interrupt rti
                      
                      ; handle loading of binary and jump to code if successful
FD66 B60484           core_interrupt  lda     CORE_FILE_DATA          ; first value $00?
FD69 2636                             bne     core_int_end            ; no
FD6B B60484           1               lda     CORE_FILE_DATA          ; yes, start chunk
FD6E F60484                           ldb     CORE_FILE_DATA
FD71 1F02                             tfr     d,y                     ; y holds size
FD73 B60484                           lda     CORE_FILE_DATA
FD76 F60484                           ldb     CORE_FILE_DATA
FD79 1F01                             tfr     d,x                     ; x holds memory location
FD7B B60484           2               lda     CORE_FILE_DATA          ; get a byte
FD7E A780                             sta     ,x+
FD80 313F                             leay    -1,y
FD82 26F7                             bne     2b                      ; finished?
FD84 B60484                           lda     CORE_FILE_DATA
FD87 27E2                             beq     1b                      ; is $00 start another chunk
FD89 81FF                             cmpa    #$ff
FD8B 2614                             bne     core_int_end            ; not equal
FD8D B60484                           lda     CORE_FILE_DATA
FD90 260F                             bne     core_int_end            ; not equal to zero
FD92 B60484                           lda     CORE_FILE_DATA
FD95 260A                             bne     core_int_end            ; not equal to zero
FD97 B60484                           lda     CORE_FILE_DATA
FD9A F60484                           ldb     CORE_FILE_DATA          ; d now contains execution address
FD9D DD01                             std     execution_addr          ; store it
FD9F 0C03                             inc     binary_ready            ; %00000001
FDA1 3B               core_int_end    rti
                      
                      ; prng / rnd routine, value contained in ac
                      ; see:
                      ; c version:
                      ;
                      ;
                      ;
                      ;
                      ;
FDA2 0CFF             rnd_impl        inc     rndx
FDA4 96FC                             lda     rnda
FDA6 98FE                             eora    rndc
FDA8 98FF                             eora    rndx
FDAA 97FC                             sta     rnda
FDAC 9BFD                             adda    rndb
FDAE 97FD                             sta     rndb
FDB0 44                               lsra
FDB1 9BFE                             adda    rndc
FDB3 98FC                             eora    rnda
FDB5 97FE                             sta     rndc
FDB7 39                               rts
                      
FDB8 6E9F0208         1               jmp     [VECTOR_IRQ_INDIRECT]
                      
FDBC 00000100         logo_chars      fcb     %00000000,%00000000,%00000001,%00000000 ; tile 1 (icon upper left)
FDC0 078007A0                         fcb     %00000111,%10000000,%00000111,%10100000
FDC4 1EF81EAF                         fcb     %00011110,%11111000,%00011110,%10101111
FDC8 1EAA1EAF                         fcb     %00011110,%10101010,%00011110,%10101111
FDCC 00000000                         fcb     %00000000,%00000000,%00000000,%00000000 ; tile 2 (icon upper right)
FDD0 00000000                         fcb     %00000000,%00000000,%00000000,%00000000
FDD4 00000000                         fcb     %00000000,%00000000,%00000000,%00000000
FDD8 C000B000                         fcb     %11000000,%00000000,%10110000,%00000000
FDDC 1EFA07AA                         fcb     %00011110,%11111010,%00000111,%10101010 ; tile 3 (icon bottom left)
FDE0 07AB01EB                         fcb     %00000111,%10101011,%00000001,%11101011
FDE4 007E0017                         fcb     %00000000,%01111110,%00000000,%00010111
FDE8 00010000                         fcb     %00000000,%00000001,%00000000,%00000000
FDEC EC00EE00                         fcb     %11101100,%00000000,%11101110,%00000000 ; tile 4 (icon bottom right)
FDF0 AB80ABA0                         fcb     %10101011,%10000000,%10101011,%10100000
FDF4 AAF4FF50                         fcb     %10101010,%11110100,%11111111,%01010000
FDF8 55000000                         fcb     %01010101,%00000000,%00000000,%00000000
                      
FFED                                  org     $fff0 - (vectors - rnd)
                      
FFED 7EFDA2           rnd             jmp     rnd_impl
                      
FFF0 0000             vectors         fdb     $0000
FFF2 0000                             fdb     $0000
FFF4 0000                             fdb     $0000
FFF6 0000                             fdb     $0000
FFF8 FDB8                             fdb     1b              ; irq vector
FFFA 0000                             fdb     $0000
FFFC 0000                             fdb     $0000
FFFE FC12                             fdb     reset           ; reset vector
