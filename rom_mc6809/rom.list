                      ;-----------------------------------------------------------------------
                      ; rom.s (assembles with asm6809)
                      ; lime
                      ;
                      ; Copyright © 2025 elmerucr. All rights reserved.
                      ;-----------------------------------------------------------------------
                      
                      ; rom 0.9 20250603
                      ; adding rnd routine
                      
                      ; rom 0.8 20250420
                      ;
                      ;
                      
0000                                  include "definitions.i"
                      ;-----------------------------------------------------------------------
                      ; definitions.i
                      ; lime
                      ;
                      ; Copyright © 2025 elmerucr. All rights reserved.
                      ;-----------------------------------------------------------------------
                      
0200                  VECTOR_ILLOP_INDIRECT   equ     $0200
0202                  VECTOR_SWI3_INDIRECT    equ     $0202
0204                  VECTOR_SWI2_INDIRECT    equ     $0204
0206                  VECTOR_FIRQ_INDIRECT    equ     $0206
0208                  VECTOR_IRQ_INDIRECT     equ     $0208
020A                  VECTOR_SWI_INDIRECT     equ     $020a
020C                  VECTOR_NMI_INDIRECT     equ     $020c
                      ; $020e unused and reserved
0210                  VECTOR_TIMER0_INDIRECT  equ     $0210
0212                  VECTOR_TIMER1_INDIRECT  equ     $0212
0214                  VECTOR_TIMER2_INDIRECT  equ     $0214
0216                  VECTOR_TIMER3_INDIRECT  equ     $0216
0218                  VECTOR_TIMER4_INDIRECT  equ     $0218
021A                  VECTOR_TIMER5_INDIRECT  equ     $021a
021C                  VECTOR_TIMER6_INDIRECT  equ     $021c
021E                  VECTOR_TIMER7_INDIRECT  equ     $021e
0220                  VECTOR_VDC_INDIRECT     equ     $0220
                      
                      ; vdc (video display controller)
0400                  VDC_SR                  equ     $0400
0401                  VDC_CR                  equ     $0401
0404                  VDC_BG_COLOR            equ     $0404
0405                  VDC_CURRENT_PALETTE     equ     $0405
0406                  VDC_CURRENT_LAYER       equ     $0406
0407                  VDC_CURRENT_SPRITE      equ     $0407
                      
0408                  VDC_PALETTE_ALPHA       equ     $0408
0409                  VDC_PALETTE_RED         equ     $0409
040A                  VDC_PALETTE_GREEN       equ     $040a
040B                  VDC_PALETTE_BLUE        equ     $040b
                      
040C                  VDC_CURRENT_SCANLINE_MSB        equ     $040c
040D                  VDC_CURRENT_SCANLINE_LSB        equ     $040d
040E                  VDC_IRQ_SCANLINE_MSB            equ     $040e
040F                  VDC_IRQ_SCANLINE_LSB            equ     $040f
                      
                      
0410                  VDC_LAYER_X_MSB         equ     $0410
0411                  VDC_LAYER_X_LSB         equ     $0411
0412                  VDC_LAYER_Y_MSB         equ     $0412
0413                  VDC_LAYER_Y_LSB         equ     $0413
0414                  VDC_LAYER_FLAGS0        equ     $0414
0415                  VDC_LAYER_FLAGS1        equ     $0415
0416                  VDC_LAYER_BASE_MSB      equ     $0416
0417                  VDC_LAYER_BASE_LSB      equ     $0417
0418                  VDC_LAYER_COLOR0        equ     $0418
0419                  VDC_LAYER_COLOR1        equ     $0419
041A                  VDC_LAYER_COLOR2        equ     $041a
041B                  VDC_LAYER_COLOR3        equ     $041b
                      
0420                  VDC_SPRITE_X_MSB        equ     $0420
0421                  VDC_SPRITE_X_LSB        equ     $0421
0422                  VDC_SPRITE_Y_MSB        equ     $0422
0423                  VDC_SPRITE_Y_LSB        equ     $0423
0424                  VDC_SPRITE_FLAGS0       equ     $0424
0425                  VDC_SPRITE_FLAGS1       equ     $0425
0426                  VDC_SPRITE_INDEX        equ     $0426
0428                  VDC_SPRITE_COLOR0       equ     $0428
0429                  VDC_SPRITE_COLOR1       equ     $0429
042A                  VDC_SPRITE_COLOR2       equ     $042a
042B                  VDC_SPRITE_COLOR3       equ     $042b
                      
0800                  VDC_TILESET0            equ     $0800
1000                  VDC_TILESET1            equ     $1000
2000                  VDC_LAYER0              equ     $2000
2400                  VDC_LAYER1              equ     $2400
2800                  VDC_LAYER2              equ     $2800
2C00                  VDC_LAYER3              equ     $2c00
                      
                      ; timer
0440                  TIMER_SR                equ     $0440
0441                  TIMER_CR                equ     $0441
0450                  TIMER0_BPM              equ     $0450
0452                  TIMER1_BPM              equ     $0452
0454                  TIMER2_BPM              equ     $0454
0456                  TIMER3_BPM              equ     $0456
0458                  TIMER4_BPM              equ     $0458
045A                  TIMER5_BPM              equ     $045a
045C                  TIMER6_BPM              equ     $045c
045E                  TIMER7_BPM              equ     $045e
                      
                      ; core
0480                  CORE_SR                 equ     $0480
0481                  CORE_CR                 equ     $0481
0482                  CORE_ROMS               equ     $0482
0484                  CORE_FILE_DATA          equ     $0484
0488                  CORE_INPUT0             equ     $0488
                      
                      ; sound devices
0500                  SID0_F                  equ     $0500
0502                  SID0_PW                 equ     $0502
051B                  SID0_V                  equ     $051b
053B                  SID1_V                  equ     $053b
0580                  MIX_SID0_LEFT           equ     $0580
0581                  MIX_SID0_RIGHT          equ     $0581
0582                  MIX_SID1_LEFT           equ     $0582
0583                  MIX_SID1_RIGHT          equ     $0583
0584                  MIX_ANA0_LEFT           equ     $0584
0585                  MIX_ANA0_RIGHT          equ     $0585
0586                  MIX_ANA1_LEFT           equ     $0586
0587                  MIX_ANA1_RIGHT          equ     $0587
                      
                      ; general
3000                  RAM_START               equ     $3000
FE00                  ROM_START               equ     $fe00
                      
0000                                  setdp   $00
                      
0000                  logo_animation  equ     $00
0001                  execution_addr  equ     $01
0003                  binary_ready    equ     $03
00FC                  rnda            equ     $fc
00FD                  rndb            equ     $fd
00FE                  rndc            equ     $fe
00FF                  rndx            equ     $ff
                      
0000                                  setdp   $00             ; assembler now assumes dp = $00 and
                                                              ; uses dp addressing when appropriate
                      
FC00                                  org     $fc00
                      
FC00 726F6D206D633638                 fcn     "rom mc6809 0.10 20250816"
     303920302E313020
     3230323530383136
     00
FC19 10CE0200         reset           lds     #$0200          ; sets system stackpointer + enables nmi
FC1D CEFE00                           ldu     #$fe00          ; sets user stackpointer
                      
FC20 B60482                           lda     CORE_ROMS       ; make font visible to cpu
FC23 8A02                             ora     #%00000010
FC25 B70482                           sta     CORE_ROMS
                      
FC28 8E1000                           ldx     #VDC_TILESET1   ; copy font from rom to ram
FC2B A684             1               lda     ,x
FC2D A780                             sta     ,x+
FC2F 8C2000                           cmpx    #VDC_TILESET1+$1000
FC32 26F7                             bne     1b
                      
FC34 B60482                           lda     CORE_ROMS               ; turn off font rom
FC37 84FD                             anda    #%11111101
FC39 B70482                           sta     CORE_ROMS
                      
FC3C 8EFDE3                           ldx     #logo_tiles
FC3F 108E11C0                         ldy     #$11c0
FC43 A680             2               lda     ,x+
FC45 A7A0                             sta     ,y+
FC47 8CFE23                           cmpx    #logo_tiles+64
FC4A 26F7                             bne     2b
                      
                      ; init logo
FC4C 8EFCE5                           ldx     #logo_data              ; x points to start of logo data
FC4F 5F                               clrb                            ; b holds current sprite
FC50 F70407           3               stb     VDC_CURRENT_SPRITE      ; set active sprite
FC53 108E0420                         ldy     #VDC_SPRITE_X_MSB       ; y points to start of sprite registers
FC57 A680             4               lda     ,x+                     ; copy data
FC59 A7A0                             sta     ,y+
FC5B 108C0427                         cmpy    #VDC_SPRITE_X_MSB+7     ; did we copy 5 values?
FC5F 26F6                             bne     4b                      ; not yet, continue at 2
FC61 5C                               incb                            ; we did, set next active sprite
FC62 8CFD1D                           cmpx    #logo_data+56           ; did we reach end of data?
FC65 26E9                             bne     3b                      ; no, continue at 1
                      
                      ; set variable for letter wobble
FC67 8640                             lda     #$40
FC69 9700                             sta     logo_animation
                      
                      ; set jump vectors
FC6B 8EFD1D                           ldx     #exc_irq
FC6E BF0208                           stx     VECTOR_IRQ_INDIRECT
FC71 8EFD8C                           ldx     #timer_interrupt
FC74 108E0210                         ldy     #VECTOR_TIMER0_INDIRECT
FC78 AFA1             1               stx     ,y++
FC7A 108C0220                         cmpy    #VECTOR_TIMER0_INDIRECT+16
FC7E 26F8                             bne     1b
FC80 8EFD51                           ldx     #vdc_interrupt
FC83 BF0220                           stx     VECTOR_VDC_INDIRECT
                      
                      ; set raster irq on scanline 159
FC86 869F                             lda     #$9f
FC88 B7040F                           sta     VDC_IRQ_SCANLINE_LSB
FC8B 8601                             lda     #%00000001
FC8D B70401                           sta     VDC_CR          ; enable irq's for vdc
                      
                      ; cleary binary ready flag
FC90 0F03                             clr     binary_ready
                      
                      ; sound
FC92 8D2C                             bsr     sound_reset
                      
                      ; enable irq's
FC94 1CEF                             andcc   #%11101111
                      
                      ; clear rnd variables
FC96 0FFC                             clr     rnda
FC98 0FFD                             clr     rndb
FC9A 0FFE                             clr     rndc
FC9C 0FFF                             clr     rndx
                      
                      ; "main" loop
FC9E 13               loop            sync
FC9F 9603                             lda     binary_ready
FCA1 27FB                             beq     loop
                      
                      ; disable logo and jump to start of binary
FCA3 1A10             _jump           orcc    #%00010000              ; disable irq's
FCA5 7F0481                           clr     CORE_CR                 ; no irq when new bin inserted
FCA8 7F0401                           clr     VDC_CR
FCAB 5F                               clrb
FCAC F70407           1               stb     VDC_CURRENT_SPRITE
FCAF B60424                           lda     VDC_SPRITE_FLAGS0
FCB2 84FE                             anda    #%11111110
FCB4 B70424                           sta     VDC_SPRITE_FLAGS0
FCB7 5C                               incb
FCB8 C108                             cmpb    #$08
FCBA 26F0                             bne     1b
FCBC 6E9F0001                         jmp     [execution_addr]
                      
FCC0 3626             sound_reset     pshu    y,b,a
FCC2 C640                             ldb     #$40
FCC4 108E0500                         ldy     #SID0_F                 ; start of sound (sid 0)
FCC8 6FA0             1               clr     ,y+
FCCA 5A                               decb
FCCB 26FB                             bne     1b
FCCD 867F                             lda     #$7f                    ; mixer at half volume
FCCF C608                             ldb     #$08                    ; 8 mixing registers in total
FCD1 108E0580                         ldy     #MIX_SID0_LEFT          ; start of io mixer
FCD5 A7A0             2               sta     ,y+
FCD7 5A                               decb
FCD8 26FB                             bne     2b
FCDA 860F                             lda     #$0f                    ; set sid volumes to max
FCDC B7051B                           sta     SID0_V                  ; sid 0 volume
FCDF B7053B                           sta     SID1_V                  ; sid 1 volume
FCE2 3726                             pulu    y,b,a
FCE4 39                               rts
                      
FCE5 0070004007001C   logo_data       fcb     0,112,0,64,%111,0,$1c           ; icon top left
FCEC 0078004007001D                   fcb     0,120,0,64,%111,0,$1d           ; icon top right
FCF3 0070004807001E                   fcb     0,112,0,72,%111,0,$1e           ; icon bottom left
FCFA 0078004807001F                   fcb     0,120,0,72,%111,0,$1f           ; icon bottom right
FD01 006B005007006C                   fcb     0,107,0,80,%111,0,$6c           ; l
FD08 00700050070069                   fcb     0,112,0,80,%111,0,$69           ; i
FD0F 0076005007006D                   fcb     0,118,0,80,%111,0,$6d           ; m
FD16 007E0050070065                   fcb     0,126,0,80,%111,0,$65           ; e
                      
FD1D B60440           exc_irq         lda     TIMER_SR                ; load timer status register
FD20 2716                             beq     exc_vdc
FD22 8E0210                           ldx     #VECTOR_TIMER0_INDIRECT ; it is one of the timers, load x with 1st vector indirect
FD25 8601                             lda     #%00000001
FD27 B50440           exc_test_tim    bita    TIMER_SR
FD2A 2705                             beq     exc_next_tim
FD2C B70440                           sta     TIMER_SR                ; acknowledge interrupt
FD2F 6E94                             jmp     [,x]
FD31 48               exc_next_tim    asla
FD32 271C                             beq     exc_irq_end
FD34 3002                             leax    2,x                     ; load x with address of next vector
FD36 20EF                             bra     exc_test_tim
FD38 B60400           exc_vdc         lda     VDC_SR
FD3B 2708                             beq     exc_core
FD3D B70400                           sta     VDC_SR
FD40 8E0220                           ldx     #VECTOR_VDC_INDIRECT
FD43 6E94                             jmp     [,x]
FD45 B60480           exc_core        lda     CORE_SR                 ; triggered when binary inserted
FD48 2706                             beq     exc_irq_end
FD4A B70480                           sta     CORE_SR
FD4D 7EFD8D                           jmp     core_interrupt
FD50 3B               exc_irq_end     rti
                      
FD51 B60407           vdc_interrupt   lda     VDC_CURRENT_SPRITE
FD54 3402                             pshs    a
FD56 9600                             lda     logo_animation
FD58 4C                               inca
FD59 8190                             cmpa    #$90
FD5B 2606                             bne     1f                      ; didn't reach #$90
FD5D 8601                             lda     #%00000001              ; we did reach #$90
FD5F B70481                           sta     CORE_CR                 ; activate irq's for binary insert
                                                                      ; this makes sure letters wobble at least 1 time
FD62 4F                               clra
                      
FD63 9700             1               sta     logo_animation
                      
FD65 C604                             ldb     #$04                    ; set current sprite to 4
FD67 F70407           2               stb     VDC_CURRENT_SPRITE
                      
FD6A 8650                             lda     #80                     ; set default y value
FD6C B70423                           sta     VDC_SPRITE_Y_LSB
                      
FD6F B60421                           lda     VDC_SPRITE_X_LSB        ; load its x register
FD72 9000                             suba    logo_animation          ; subtract the ani var
FD74 8008                             suba    #$08
FD76 2203                             bhi     3f                      ; if difference larger than 8 keep its y value
FD78 7A0423                           dec     VDC_SPRITE_Y_LSB
FD7B 5C               3               incb
FD7C C108                             cmpb    #$08
FD7E 26E7                             bne     2b
                      
FD80 B60488                           lda     CORE_INPUT0             ; use controller input to change screen background color
FD83 B70404                           sta     VDC_BG_COLOR
FD86 3502                             puls    a
FD88 B70407                           sta     VDC_CURRENT_SPRITE
FD8B 3B                               rti
                      
FD8C 3B               timer_interrupt rti
                      
                      ; handle loading of binary and jump to code if successful
FD8D B60484           core_interrupt  lda     CORE_FILE_DATA          ; first value $00?
FD90 2636                             bne     core_int_end            ; no
FD92 B60484           1               lda     CORE_FILE_DATA          ; yes, start chunk
FD95 F60484                           ldb     CORE_FILE_DATA
FD98 1F02                             tfr     d,y                     ; y holds size
FD9A B60484                           lda     CORE_FILE_DATA
FD9D F60484                           ldb     CORE_FILE_DATA
FDA0 1F01                             tfr     d,x                     ; x holds memory location
FDA2 B60484           2               lda     CORE_FILE_DATA          ; get a byte
FDA5 A780                             sta     ,x+
FDA7 313F                             leay    -1,y
FDA9 26F7                             bne     2b                      ; finished?
FDAB B60484                           lda     CORE_FILE_DATA
FDAE 27E2                             beq     1b                      ; is $00 start another chunk
FDB0 81FF                             cmpa    #$ff
FDB2 2614                             bne     core_int_end            ; not equal
FDB4 B60484                           lda     CORE_FILE_DATA
FDB7 260F                             bne     core_int_end            ; not equal to zero
FDB9 B60484                           lda     CORE_FILE_DATA
FDBC 260A                             bne     core_int_end            ; not equal to zero
FDBE B60484                           lda     CORE_FILE_DATA
FDC1 F60484                           ldb     CORE_FILE_DATA          ; d now contains execution address
FDC4 DD01                             std     execution_addr          ; store it
FDC6 0C03                             inc     binary_ready            ; %00000001
FDC8 3B               core_int_end    rti
                      
                      ; prng / rnd routine, value contained in ac
                      ; see:
                      ; c version:
                      ;
                      ;
                      ;
                      ;
                      ;
FDC9 0CFF             rnd_impl        inc     rndx
FDCB 96FC                             lda     rnda
FDCD 98FE                             eora    rndc
FDCF 98FF                             eora    rndx
FDD1 97FC                             sta     rnda
FDD3 9BFD                             adda    rndb
FDD5 97FD                             sta     rndb
FDD7 44                               lsra
FDD8 9BFE                             adda    rndc
FDDA 98FC                             eora    rnda
FDDC 97FE                             sta     rndc
FDDE 39                               rts
                      
FDDF 6E9F0208         1               jmp     [VECTOR_IRQ_INDIRECT]
                      
FDE3 0000             logo_tiles      fcb     %00000000,%00000000     ; tile 1 (icon upper left)
FDE5 0100                             fcb     %00000001,%00000000
FDE7 0780                             fcb     %00000111,%10000000
FDE9 07A0                             fcb     %00000111,%10100000
FDEB 1EF8                             fcb     %00011110,%11111000
FDED 1EAF                             fcb     %00011110,%10101111
FDEF 1EAA                             fcb     %00011110,%10101010
FDF1 1EAF                             fcb     %00011110,%10101111
                      
FDF3 0000                             fcb     %00000000,%00000000     ; tile 2 (icon upper right)
FDF5 0000                             fcb     %00000000,%00000000
FDF7 0000                             fcb     %00000000,%00000000
FDF9 0000                             fcb     %00000000,%00000000
FDFB 0000                             fcb     %00000000,%00000000
FDFD 0000                             fcb     %00000000,%00000000
FDFF C000                             fcb     %11000000,%00000000
FE01 B000                             fcb     %10110000,%00000000
                      
FE03 1EFA                             fcb     %00011110,%11111010     ; tile 3 (icon bottom left)
FE05 07AA                             fcb     %00000111,%10101010
FE07 07AB                             fcb     %00000111,%10101011
FE09 01EB                             fcb     %00000001,%11101011
FE0B 007E                             fcb     %00000000,%01111110
FE0D 0017                             fcb     %00000000,%00010111
FE0F 0001                             fcb     %00000000,%00000001
FE11 0000                             fcb     %00000000,%00000000
                      
FE13 EC00                             fcb     %11101100,%00000000     ; tile 4 (icon bottom right)
FE15 EE00                             fcb     %11101110,%00000000
FE17 AB80                             fcb     %10101011,%10000000
FE19 ABA0                             fcb     %10101011,%10100000
FE1B AAF4                             fcb     %10101010,%11110100
FE1D FF50                             fcb     %11111111,%01010000
FE1F 5500                             fcb     %01010101,%00000000
FE21 0000                             fcb     %00000000,%00000000
                      
FFED                                  org     $fff0 - (vectors - rnd)
                      
FFED 7EFDC9           rnd             jmp     rnd_impl
                      
FFF0 0000             vectors         fdb     $0000
FFF2 0000                             fdb     $0000
FFF4 0000                             fdb     $0000
FFF6 0000                             fdb     $0000
FFF8 FDDF                             fdb     1b              ; irq vector
FFFA 0000                             fdb     $0000
FFFC 0000                             fdb     $0000
FFFE FC19                             fdb     reset           ; reset vector
