Sections:
00: "seg10000" (10000-10292)


Source: "rom.s"
                            	     1: ; ----------------------------------------------------------------------
                            	     2: ; rom.s (assembles with vasmm68k_mot)
                            	     3: ; lime
                            	     4: ;
                            	     5: ; Copyright © 2025 elmerucr. All rights reserved.
                            	     6: ; ----------------------------------------------------------------------
                            	     7: 
                            	     8: 	include	"definitions.i"

Source: "definitions.i"
                            	     1: ; ----------------------------------------------------------------------
                            	     2: ; definitions.i
                            	     3: ; lime
                            	     4: ;
                            	     5: ; Copyright © 2025 elmerucr. All rights reserved.
                            	     6: ; ----------------------------------------------------------------------
                            	     7: 
                            	     8: ; vectors
                            	     9: VEC_ADDR_ERROR			equ	$000c
                            	    10: VEC_LVL1_IRQ_AUTO		equ	$0064
                            	    11: VEC_LVL4_IRQ_AUTO		equ	$0070	; entry point for timer
                            	    12: VEC_LVL6_IRQ_AUTO		equ	$0078	; entry point for vdc
                            	    13: VEC_TIMER0			equ	$0100
                            	    14: VEC_TIMER1			equ	$0104
                            	    15: VEC_TIMER2			equ	$0108
                            	    16: VEC_TIMER3			equ	$010c
                            	    17: VEC_TIMER4			equ	$0110
                            	    18: VEC_TIMER5			equ	$0114
                            	    19: VEC_TIMER6			equ	$0118
                            	    20: VEC_TIMER7			equ	$011c
                            	    21: 
                            	    22: ; vdc (video display controller)
                            	    23: VDC_SR				equ	$0400
                            	    24: VDC_CR				equ	$0401
                            	    25: VDC_BG_COLOR			equ	$0404
                            	    26: VDC_CURRENT_SPRITE		equ	$0407
                            	    27: VDC_CURRENT_SCANLINE_MSB	equ	$040c
                            	    28: VDC_CURRENT_SCANLINE_LSB	equ	$040d
                            	    29: VDC_IRQ_SCANLINE_MSB		equ	$040e
                            	    30: VDC_IRQ_SCANLINE_LSB		equ	$040f
                            	    31: 
                            	    32: VDC_LAYER_BASE_MSB		equ	$0416
                            	    33: VDC_LAYER_BASE_LSB		equ	$0417
                            	    34: 
                            	    35: VDC_SPRITE_X_MSB		equ	$0420
                            	    36: VDC_SPRITE_X_LSB		equ	$0421
                            	    37: VDC_SPRITE_Y_MSB		equ	$0422
                            	    38: VDC_SPRITE_Y_LSB		equ	$0423
                            	    39: 
                            	    40: VDC_TILESET0			equ	$0800
                            	    41: VDC_TILESET1			equ	$1000
                            	    42: 
                            	    43: ; sound devices
                            	    44: SID0_F				equ	$0500
                            	    45: SID0_PW				equ	$0502
                            	    46: SID0_V				equ	$051b
                            	    47: SID1_V				equ	$053b
                            	    48: MIX_SID0_LEFT			equ	$0580
                            	    49: MIX_SID0_RIGHT			equ	$0581
                            	    50: MIX_SID1_LEFT			equ	$0582
                            	    51: MIX_SID1_RIGHT			equ	$0583
                            	    52: MIX_ANA0_LEFT			equ	$0584
                            	    53: MIX_ANA0_RIGHT			equ	$0585
                            	    54: MIX_ANA1_LEFT			equ	$0586
                            	    55: MIX_ANA1_RIGHT			equ	$0587
                            	    56: 
                            	    57: ; timer
                            	    58: TIMER_SR			equ	$0440
                            	    59: TIMER_CR			equ	$0441
                            	    60: TIMER0_BPM			equ	$0450
                            	    61: TIMER1_BPM			equ	$0452
                            	    62: TIMER2_BPM			equ	$0454
                            	    63: TIMER3_BPM			equ	$0456
                            	    64: TIMER4_BPM			equ	$0458
                            	    65: TIMER5_BPM			equ	$045a
                            	    66: TIMER6_BPM			equ	$045c
                            	    67: TIMER7_BPM			equ	$045e
                            	    68: 
                            	    69: ; core
                            	    70: CORE_CR				equ	$0481
                            	    71: CORE_ROMS			equ	$0482
                            	    72: CORE_INPUT0			equ	$0488

Source: "rom.s"
                            	     9: 
                            	    10: LOGO_ANIMATION	equ	$4000
                            	    11: 
                            	    12: 
                            	    13: 	org	$00010000	; rom based at $10000
                            	    14: 
00:00010000 01000000        	    15: 	dc.l	$01000000	; initial ssp at end of ram
00:00010004 00010020        	    16: 	dc.l	_start		; reset vector
                            	    17: 
00:00010008 726F6D206D633638	    18: 	dc.b	"rom mc68000 0.3 20250929"
00:00010010 30303020302E3320
00:00010018 3230323530393239
                            	    19: 
                            	    20: 	align	2
                            	    21: 
                            	    22: _start
                            	    23: 	; fill vector table
00:00010020 21FC00010112000C	    24: 	move.l	#exc_addr_error,VEC_ADDR_ERROR.w
00:00010028 21FC000101160064	    25: 	move.l	#exc_lvl1_irq_auto,VEC_LVL1_IRQ_AUTO.w
00:00010030 21FC000101180070	    26: 	move.l	#exc_lvl4_irq_auto,VEC_LVL4_IRQ_AUTO.w
00:00010038 21FC000101480078	    27: 	move.l	#exc_lvl6_irq_auto,VEC_LVL6_IRQ_AUTO.w
00:00010040 21FC000101D80100	    28: 	move.l	#timer_default_handler,VEC_TIMER0.w
00:00010048 21FC000101D80104	    29: 	move.l	#timer_default_handler,VEC_TIMER1.w
00:00010050 21FC000101D80108	    30: 	move.l	#timer_default_handler,VEC_TIMER2.w
00:00010058 21FC000101D8010C	    31: 	move.l	#timer_default_handler,VEC_TIMER3.w
00:00010060 21FC000101D80110	    32: 	move.l	#timer_default_handler,VEC_TIMER4.w
00:00010068 21FC000101D80114	    33: 	move.l	#timer_default_handler,VEC_TIMER5.w
00:00010070 21FC000101D80118	    34: 	move.l	#timer_default_handler,VEC_TIMER6.w
00:00010078 21FC000101D8011C	    35: 	move.l	#timer_default_handler,VEC_TIMER7.w
                            	    36: 
                            	    37: 	; set usp
00:00010080 207C00010000    	    38: 	move.l	#$00010000,A0
00:00010086 4E60            	    39: 	move.l	A0,USP
                            	    40: 
00:00010088 003800020482    	    41: 	or.b	#%00000010,CORE_ROMS.w			; make rom font visible to cpu
00:0001008E 307C1000        	    42: 	movea	#VDC_TILESET1,A0
00:00010092 20D0            	    43: .1	move.l	(A0),(A0)+				; copy rom font to underlying ram
00:00010094 B0FC2000        	    44: 	cmpa	#VDC_TILESET1+$1000,A0
00:00010098 6600FFF8        	    45: 	bne	.1
00:0001009C 023800FD0482    	    46: 	and.b	#%11111101,CORE_ROMS.w			; turn off rom font
                            	    47: 
                            	    48: ; copy logo tiles
00:000100A2 207C00010252    	    49: 	movea.l	#logo_tiles,A0
00:000100A8 327C11C0        	    50: 	movea.w	#$11c0,A1
00:000100AC 12D8            	    51: .2	move.b	(A0)+,(A1)+
00:000100AE B1FC00010292    	    52: 	cmpa.l	#logo_tiles+64,A0
00:000100B4 6600FFF6        	    53: 	bne	.2
                            	    54: 
                            	    55: ; init logo
00:000100B8 207C0001021A    	    56: 	movea.l	#logo_data,A0
00:000100BE 4200            	    57: 	clr.b	D0
00:000100C0 13C000000407    	    58: .3	move.b	D0,VDC_CURRENT_SPRITE
00:000100C6 227C00000420    	    59: 	movea.l	#VDC_SPRITE_X_MSB,A1
00:000100CC 12D8            	    60: .4	move.b	(A0)+,(A1)+
00:000100CE B3FC00000427    	    61: 	cmpa.l	#VDC_SPRITE_X_MSB+7,A1
00:000100D4 6600FFF6        	    62: 	bne	.4
00:000100D8 5240            	    63: 	addq	#1,D0
00:000100DA B1FC00010252    	    64: 	cmpa.l	#logo_data+56,A0
00:000100E0 6600FFDE        	    65: 	bne	.3
                            	    66: 
                            	    67: ; set variable for letter wobble
00:000100E4 11FC00684000    	    68: 	move.b	#$68,LOGO_ANIMATION.w
                            	    69: 
                            	    70: ; set raster irq on scanline 179
00:000100EA 13FC00B30000040F	    71: 	move.b	#$b3,VDC_IRQ_SCANLINE_LSB		; rasterline 179
00:000100F2 13FC000100000401	    72: 	move.b	#%00000001,VDC_CR			; enable irq's for vdc
                            	    73: 
                            	    74: 
00:000100FA 46FC0200        	    75: 	move.w	#$0200,SR				; set status register (User Mode, ipl = 0)
                            	    76: 
00:000100FE 4EB9000101E0    	    77: 	jsr	sound_reset
                            	    78: 
00:00010104 103C0000        	    79: 	move.b	#0,D0
00:00010108 B03C0004        	    80: loop	cmp.b	#4,D0
00:0001010C 5200            	    81: 	addq.b	#1,D0
                            	    82: 
00:0001010E 6000FFF8        	    83: 	bra	loop					; loop forever, wait for events
                            	    84: 
                            	    85: exc_addr_error
00:00010112 6000FFFE        	    86: 	bra	exc_addr_error				; TODO: bsod when this happens?
                            	    87: 
                            	    88: exc_lvl1_irq_auto
00:00010116 4E73            	    89: 	rte
                            	    90: 
                            	    91: exc_lvl4_irq_auto					; coupled to timer
00:00010118 48E7C080        	    92: 	movem.l	D0-D1/A0,-(SP)
                            	    93: 
00:0001011C 207C00000100    	    94: 	movea.l	#VEC_TIMER0,A0
00:00010122 103C0001        	    95: 	move.b	#%00000001,D0	; D0 contains the bit to be tested
                            	    96: 
00:00010126 1200            	    97: .1	move.b	D0,D1		; copy D0 to D1
00:00010128 C2380440        	    98: 	and.b	TIMER_SR.w,D1
00:0001012C 6600000C        	    99: 	bne	.2		; it was this timer
00:00010130 5848            	   100: 	addq	#4,A0
00:00010132 E300            	   101: 	asl.b	D0
00:00010134 6700000C        	   102: 	beq	.3
00:00010138 60EC            	   103: 	bra.s	.1
                            	   104: 
                            	   105: 	; code for dealing with this timer
00:0001013A 11C00440        	   106: .2	move.b	D0,TIMER_SR.w	; confirm this irq
00:0001013E 2050            	   107: 	movea.l	(A0),A0
00:00010140 4E90            	   108: 	jsr	(A0)
                            	   109: 
00:00010142 4CDF0103        	   110: .3	movem.l	(SP)+,D0-D1/A0
00:00010146 4E73            	   111: 	rte
                            	   112: 
                            	   113: exc_lvl6_irq_auto				; coupled to vdc
00:00010148 48E7C000        	   114: 	movem.l	D0-D1,-(SP)
00:0001014C 1F3900000407    	   115: 	move.b	VDC_CURRENT_SPRITE,-(SP)
                            	   116: 
00:00010152 10380400        	   117: 	move.b	VDC_SR.w,D0
00:00010156 6700005E        	   118: 	beq	.end
00:0001015A 11C00400        	   119: 	move.b	D0,VDC_SR.w			; acknowledge irq
                            	   120: 
00:0001015E 103900004000    	   121: 	move.b	LOGO_ANIMATION,D0
00:00010164 5200            	   122: 	addq.b	#$1,D0
00:00010166 B03C00B8        	   123: 	cmp.b	#$b8,D0
00:0001016A 6600000E        	   124: 	bne	.1
00:0001016E 13FC000100000481	   125: 	move.b	#%00000001,CORE_CR		; activate irq's for binary insert
                            	   126: 						; this makes sure letters wobble at least 1 time
00:00010176 103C0048        	   127: 	move.b	#$48,D0
                            	   128: 
00:0001017A 13C000004000    	   129: .1	move.b	D0,LOGO_ANIMATION
                            	   130: 
00:00010180 123C0004        	   131: 	move.b	#4,D1				; start with sprite 4 (letter 'l')
00:00010184 13C100000407    	   132: .2	move.b	D1,VDC_CURRENT_SPRITE
00:0001018A 13FC005A00000423	   133: 	move.b	#90,VDC_SPRITE_Y_LSB		; base position for each letter
                            	   134: 
00:00010192 103900000421    	   135: 	move.b	VDC_SPRITE_X_LSB,D0		; store x for current sprite in D0
00:00010198 903900004000    	   136: 	sub.b	LOGO_ANIMATION,D0		; subtract logo_an x value from D0
                            	   137: 
00:0001019E B03C0008        	   138: 	cmp.b	#8,D0
00:000101A2 64000008        	   139: 	bcc	.3				; if more than 8, jump to .3
                            	   140: 
00:000101A6 533900000423    	   141: 	subq.b	#1,VDC_SPRITE_Y_LSB		; move letter up 1 pixel
                            	   142: 
00:000101AC 5241            	   143: .3	addq	#1,D1				; move to next sprite
00:000101AE B23C0008        	   144: 	cmp.b	#8,D1				; did we reach sprite 8?
00:000101B2 6600FFD0        	   145: 	bne	.2				; not yet, jump to .2
                            	   146: 
00:000101B6 11F804880404    	   147: .end	move.b	CORE_INPUT0.w,VDC_BG_COLOR.w
00:000101BC 0679000100000410	   148: 	add.w	#1,$410	; TODO remove
00:000101C4 0679000100000412	   149: 	add.w	#1,$412	; TODO remove
00:000101CC 13DF00000407    	   150: 	move.b	(SP)+,VDC_CURRENT_SPRITE
00:000101D2 4CDF0003        	   151: 	movem.l	(SP)+,D0-D1
00:000101D6 4E73            	   152: 	rte
                            	   153: 
                            	   154: timer_default_handler
00:000101D8 11FC00120404    	   155: 	move.b	#$12,VDC_BG_COLOR.w
00:000101DE 4E75            	   156: 	rts
                            	   157: 
                            	   158: sound_reset
00:000101E0 207C00000500    	   159: 	movea.l	#SID0_F,A0
00:000101E6 4218            	   160: .1	clr.b	(A0)+
00:000101E8 B1FC00000540    	   161: 	cmpa.l	#SID0_F+$40,A0
00:000101EE 6600FFF6        	   162: 	bne	.1
00:000101F2 103C007F        	   163: 	move.b	#$7f,D0
00:000101F6 207C00000580    	   164: 	movea.l	#MIX_SID0_LEFT,A0
00:000101FC 10C0            	   165: .2	move.b	D0,(A0)+
00:000101FE B1FC00000588    	   166: 	cmpa.l	#MIX_SID0_LEFT+$8,A0
00:00010204 6600FFF6        	   167: 	bne	.2
00:00010208 13FC000F0000051B	   168: 	move.b	#$f,SID0_V
00:00010210 13FC000F0000053B	   169: 	move.b	#$f,SID1_V
00:00010218 4E75            	   170: 	rts
                            	   171: 
                            	   172: logo_data
00:0001021A 00              	   173: 	dc.b	0,152,0,74,%111,0,$1c	; icon top left
00:0001021B 98
00:0001021C 00
00:0001021D 4A
00:0001021E 07
00:0001021F 00
00:00010220 1C
00:00010221 00              	   174: 	dc.b	0,160,0,74,%111,0,$1d	; icon top right
00:00010222 A0
00:00010223 00
00:00010224 4A
00:00010225 07
00:00010226 00
00:00010227 1D
00:00010228 00              	   175: 	dc.b	0,152,0,82,%111,0,$1e	; icon bottom left
00:00010229 98
00:0001022A 00
00:0001022B 52
00:0001022C 07
00:0001022D 00
00:0001022E 1E
00:0001022F 00              	   176: 	dc.b	0,160,0,82,%111,0,$1f	; icon bottom right
00:00010230 A0
00:00010231 00
00:00010232 52
00:00010233 07
00:00010234 00
00:00010235 1F
00:00010236 00              	   177: 	dc.b	0,147,0,90,%111,0,$6c	; l
00:00010237 93
00:00010238 00
00:00010239 5A
00:0001023A 07
00:0001023B 00
00:0001023C 6C
00:0001023D 00              	   178: 	dc.b	0,152,0,90,%111,0,$69	; i
00:0001023E 98
00:0001023F 00
00:00010240 5A
00:00010241 07
00:00010242 00
00:00010243 69
00:00010244 00              	   179: 	dc.b	0,158,0,90,%111,0,$6d	; m
00:00010245 9E
00:00010246 00
00:00010247 5A
00:00010248 07
00:00010249 00
00:0001024A 6D
00:0001024B 00              	   180: 	dc.b	0,166,0,90,%111,0,$65	; e
00:0001024C A6
00:0001024D 00
00:0001024E 5A
00:0001024F 07
00:00010250 00
00:00010251 65
                            	   181: 
                            	   182: logo_tiles
00:00010252 00              	   183: 	dc.b	%00000000,%00000000	; tile 1 (icon upper left)
00:00010253 00
00:00010254 01              	   184: 	dc.b	%00000001,%00000000
00:00010255 00
00:00010256 07              	   185: 	dc.b	%00000111,%10000000
00:00010257 80
00:00010258 07              	   186: 	dc.b	%00000111,%10100000
00:00010259 A0
00:0001025A 1E              	   187: 	dc.b	%00011110,%11111000
00:0001025B F8
00:0001025C 1E              	   188: 	dc.b	%00011110,%10101111
00:0001025D AF
00:0001025E 1E              	   189: 	dc.b	%00011110,%10101010
00:0001025F AA
00:00010260 1E              	   190: 	dc.b	%00011110,%10101111
00:00010261 AF
                            	   191: 
00:00010262 00              	   192: 	dc.b	%00000000,%00000000	; tile 2 (icon upper right)
00:00010263 00
00:00010264 00              	   193: 	dc.b	%00000000,%00000000
00:00010265 00
00:00010266 00              	   194: 	dc.b	%00000000,%00000000
00:00010267 00
00:00010268 00              	   195: 	dc.b	%00000000,%00000000
00:00010269 00
00:0001026A 00              	   196: 	dc.b	%00000000,%00000000
00:0001026B 00
00:0001026C 00              	   197: 	dc.b	%00000000,%00000000
00:0001026D 00
00:0001026E C0              	   198: 	dc.b	%11000000,%00000000
00:0001026F 00
00:00010270 B0              	   199: 	dc.b	%10110000,%00000000
00:00010271 00
                            	   200: 
00:00010272 1E              	   201: 	dc.b	%00011110,%11111010	; tile 3 (icon bottom left)
00:00010273 FA
00:00010274 07              	   202: 	dc.b	%00000111,%10101010
00:00010275 AA
00:00010276 07              	   203: 	dc.b	%00000111,%10101011
00:00010277 AB
00:00010278 01              	   204: 	dc.b	%00000001,%11101011
00:00010279 EB
00:0001027A 00              	   205: 	dc.b	%00000000,%01111110
00:0001027B 7E
00:0001027C 00              	   206: 	dc.b	%00000000,%00010111
00:0001027D 17
00:0001027E 00              	   207: 	dc.b	%00000000,%00000001
00:0001027F 01
00:00010280 00              	   208: 	dc.b	%00000000,%00000000
00:00010281 00
                            	   209: 
00:00010282 EC              	   210: 	dc.b	%11101100,%00000000	; tile 4 (icon bottom right)
00:00010283 00
00:00010284 EE              	   211: 	dc.b	%11101110,%00000000
00:00010285 00
00:00010286 AB              	   212: 	dc.b	%10101011,%10000000
00:00010287 80
00:00010288 AB              	   213: 	dc.b	%10101011,%10100000
00:00010289 A0
00:0001028A AA              	   214: 	dc.b	%10101010,%11110100
00:0001028B F4
00:0001028C FF              	   215: 	dc.b	%11111111,%01010000
00:0001028D 50
00:0001028E 55              	   216: 	dc.b	%01010101,%00000000
00:0001028F 00
00:00010290 00              	   217: 	dc.b	%00000000,%00000000
00:00010291 00
                            	   218: 


Symbols by name:
CORE_CR                          E:00000481
CORE_INPUT0                      E:00000488
CORE_ROMS                        E:00000482
LOGO_ANIMATION                   E:00004000
MIX_SID0_LEFT                    E:00000580
SID0_F                           E:00000500
SID0_V                           E:0000051B
SID1_V                           E:0000053B
TIMER_SR                         E:00000440
VDC_BG_COLOR                     E:00000404
VDC_CR                           E:00000401
VDC_CURRENT_SPRITE               E:00000407
VDC_IRQ_SCANLINE_LSB             E:0000040F
VDC_SPRITE_X_LSB                 E:00000421
VDC_SPRITE_X_MSB                 E:00000420
VDC_SPRITE_Y_LSB                 E:00000423
VDC_SR                           E:00000400
VDC_TILESET1                     E:00001000
VEC_ADDR_ERROR                   E:0000000C
VEC_LVL1_IRQ_AUTO                E:00000064
VEC_LVL4_IRQ_AUTO                E:00000070
VEC_LVL6_IRQ_AUTO                E:00000078
VEC_TIMER0                       E:00000100
VEC_TIMER1                       E:00000104
VEC_TIMER2                       E:00000108
VEC_TIMER3                       E:0000010C
VEC_TIMER4                       E:00000110
VEC_TIMER5                       E:00000114
VEC_TIMER6                       E:00000118
VEC_TIMER7                       E:0000011C
_start                           A:00010020
exc_addr_error                   A:00010112
exc_lvl1_irq_auto                A:00010116
exc_lvl4_irq_auto                A:00010118
exc_lvl6_irq_auto                A:00010148
logo_data                        A:0001021A
logo_tiles                       A:00010252
loop                             A:00010108
sound_reset                      A:000101E0
timer_default_handler            A:000101D8

Symbols by value:
0000000C VEC_ADDR_ERROR
00000064 VEC_LVL1_IRQ_AUTO
00000070 VEC_LVL4_IRQ_AUTO
00000078 VEC_LVL6_IRQ_AUTO
00000100 VEC_TIMER0
00000104 VEC_TIMER1
00000108 VEC_TIMER2
0000010C VEC_TIMER3
00000110 VEC_TIMER4
00000114 VEC_TIMER5
00000118 VEC_TIMER6
0000011C VEC_TIMER7
00000400 VDC_SR
00000401 VDC_CR
00000404 VDC_BG_COLOR
00000407 VDC_CURRENT_SPRITE
0000040F VDC_IRQ_SCANLINE_LSB
00000420 VDC_SPRITE_X_MSB
00000421 VDC_SPRITE_X_LSB
00000423 VDC_SPRITE_Y_LSB
00000440 TIMER_SR
00000481 CORE_CR
00000482 CORE_ROMS
00000488 CORE_INPUT0
00000500 SID0_F
0000051B SID0_V
0000053B SID1_V
00000580 MIX_SID0_LEFT
00001000 VDC_TILESET1
00004000 LOGO_ANIMATION
00010020 _start
00010108 loop
00010112 exc_addr_error
00010116 exc_lvl1_irq_auto
00010118 exc_lvl4_irq_auto
00010148 exc_lvl6_irq_auto
000101D8 timer_default_handler
000101E0 sound_reset
0001021A logo_data
00010252 logo_tiles
