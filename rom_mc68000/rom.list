Sections:
00: "seg10000" (10000-10258)


Source: "rom.s"
                            	     1: ; ----------------------------------------------------------------------
                            	     2: ; rom.s (assembles with vasmm68k_mot)
                            	     3: ; lime
                            	     4: ;
                            	     5: ; Copyright © 2025 elmerucr. All rights reserved.
                            	     6: ; ----------------------------------------------------------------------
                            	     7: 
                            	     8: 	include	"definitions.i"

Source: "definitions.i"
                            	     1: ; ----------------------------------------------------------------------
                            	     2: ; definitions.i
                            	     3: ; lime
                            	     4: ;
                            	     5: ; Copyright © 2025 elmerucr. All rights reserved.
                            	     6: ; ----------------------------------------------------------------------
                            	     7: 
                            	     8: ; vectors
                            	     9: VEC_ADDR_ERROR			equ	$000c
                            	    10: VEC_LVL1_IRQ_AUTO		equ	$0064
                            	    11: VEC_LVL4_IRQ_AUTO		equ	$0070	; entry point for timer
                            	    12: VEC_LVL6_IRQ_AUTO		equ	$0078	; entry point for vdc
                            	    13: VEC_TIMER0			equ	$0100
                            	    14: VEC_TIMER1			equ	$0104
                            	    15: VEC_TIMER2			equ	$0108
                            	    16: VEC_TIMER3			equ	$010c
                            	    17: VEC_TIMER4			equ	$0110
                            	    18: VEC_TIMER5			equ	$0114
                            	    19: VEC_TIMER6			equ	$0118
                            	    20: VEC_TIMER7			equ	$011c
                            	    21: 
                            	    22: ; vdc (video display controller)
                            	    23: VDC_SR				equ	$0400
                            	    24: VDC_CR				equ	$0401
                            	    25: VDC_BG_COLOR			equ	$0404
                            	    26: VDC_CURRENT_SPRITE		equ	$0407
                            	    27: VDC_CURRENT_SCANLINE_MSB	equ	$040c
                            	    28: VDC_CURRENT_SCANLINE_LSB	equ	$040d
                            	    29: VDC_IRQ_SCANLINE_MSB		equ	$040e
                            	    30: VDC_IRQ_SCANLINE_LSB		equ	$040f
                            	    31: 
                            	    32: VDC_LAYER_BASE_MSB		equ	$0416
                            	    33: VDC_LAYER_BASE_LSB		equ	$0417
                            	    34: 
                            	    35: VDC_SPRITE_X_MSB		equ	$0420
                            	    36: VDC_SPRITE_X_LSB		equ	$0421
                            	    37: VDC_SPRITE_Y_MSB		equ	$0422
                            	    38: VDC_SPRITE_Y_LSB		equ	$0423
                            	    39: 
                            	    40: VDC_TILESET0			equ	$0800
                            	    41: VDC_TILESET1			equ	$1000
                            	    42: 
                            	    43: ; sound devices
                            	    44: SID0_F				equ	$0500
                            	    45: SID0_PW				equ	$0502
                            	    46: SID0_V				equ	$051b
                            	    47: SID1_V				equ	$053b
                            	    48: MIX_SID0_LEFT			equ	$0580
                            	    49: MIX_SID0_RIGHT			equ	$0581
                            	    50: MIX_SID1_LEFT			equ	$0582
                            	    51: MIX_SID1_RIGHT			equ	$0583
                            	    52: MIX_ANA0_LEFT			equ	$0584
                            	    53: MIX_ANA0_RIGHT			equ	$0585
                            	    54: MIX_ANA1_LEFT			equ	$0586
                            	    55: MIX_ANA1_RIGHT			equ	$0587
                            	    56: 
                            	    57: ; timer
                            	    58: TIMER_SR			equ	$0440
                            	    59: TIMER_CR			equ	$0441
                            	    60: TIMER0_BPM			equ	$0450
                            	    61: TIMER1_BPM			equ	$0452
                            	    62: TIMER2_BPM			equ	$0454
                            	    63: TIMER3_BPM			equ	$0456
                            	    64: TIMER4_BPM			equ	$0458
                            	    65: TIMER5_BPM			equ	$045a
                            	    66: TIMER6_BPM			equ	$045c
                            	    67: TIMER7_BPM			equ	$045e
                            	    68: 
                            	    69: ; core
                            	    70: CORE_CR				equ	$0481
                            	    71: CORE_ROMS			equ	$0482
                            	    72: CORE_INPUT0			equ	$0488

Source: "rom.s"
                            	     9: 
                            	    10: LOGO_ANIMATION	equ	$3000
                            	    11: 
                            	    12: 
                            	    13: 	org	$00010000	; rom based at $10000
                            	    14: 
00:00010000 01000000        	    15: 	dc.l	$01000000	; initial ssp at end of ram
00:00010004 00010020        	    16: 	dc.l	_start		; reset vector
                            	    17: 
00:00010008 726F6D206D633638	    18: 	dc.b	"rom mc68000 0.2 20250924"
00:00010010 30303020302E3220
00:00010018 3230323530393234
                            	    19: 
                            	    20: 	align	2
                            	    21: 
                            	    22: _start
                            	    23: 	; fill vector table
00:00010020 21FC00010108000C	    24: 	move.l	#exc_addr_error,VEC_ADDR_ERROR.w
00:00010028 21FC0001010C0064	    25: 	move.l	#exc_lvl1_irq_auto,VEC_LVL1_IRQ_AUTO.w
00:00010030 21FC0001010E0070	    26: 	move.l	#exc_lvl4_irq_auto,VEC_LVL4_IRQ_AUTO.w
00:00010038 21FC0001013E0078	    27: 	move.l	#exc_lvl6_irq_auto,VEC_LVL6_IRQ_AUTO.w
00:00010040 21FC0001019E0100	    28: 	move.l	#timer_default_handler,VEC_TIMER0.w
00:00010048 21FC0001019E0104	    29: 	move.l	#timer_default_handler,VEC_TIMER1.w
00:00010050 21FC0001019E0108	    30: 	move.l	#timer_default_handler,VEC_TIMER2.w
00:00010058 21FC0001019E010C	    31: 	move.l	#timer_default_handler,VEC_TIMER3.w
00:00010060 21FC0001019E0110	    32: 	move.l	#timer_default_handler,VEC_TIMER4.w
00:00010068 21FC0001019E0114	    33: 	move.l	#timer_default_handler,VEC_TIMER5.w
00:00010070 21FC0001019E0118	    34: 	move.l	#timer_default_handler,VEC_TIMER6.w
00:00010078 21FC0001019E011C	    35: 	move.l	#timer_default_handler,VEC_TIMER7.w
                            	    36: 
                            	    37: 	; set usp
00:00010080 207C00010000    	    38: 	move.l	#$00010000,A0
00:00010086 4E60            	    39: 	move.l	A0,USP
                            	    40: 
00:00010088 003800020482    	    41: 	or.b	#%00000010,CORE_ROMS.w			; make rom font visible to cpu
00:0001008E 307C1000        	    42: 	movea	#VDC_TILESET1,A0
00:00010092 20D0            	    43: .1	move.l	(A0),(A0)+				; copy rom font to underlying ram
00:00010094 B0FC2000        	    44: 	cmpa	#VDC_TILESET1+$1000,A0
00:00010098 6600FFF8        	    45: 	bne	.1
00:0001009C 023800FD0482    	    46: 	and.b	#%11111101,CORE_ROMS.w			; turn off rom font
                            	    47: 
                            	    48: ; copy logo tiles
00:000100A2 207C00010218    	    49: 	movea.l	#logo_tiles,A0
00:000100A8 327C11C0        	    50: 	movea.w	#$11c0,A1
00:000100AC 12D8            	    51: .2	move.b	(A0)+,(A1)+
00:000100AE B1FC00010258    	    52: 	cmpa.l	#logo_tiles+64,A0
00:000100B4 6600FFF6        	    53: 	bne	.2
                            	    54: 
                            	    55: ; init logo
00:000100B8 207C000101E0    	    56: 	movea.l	#logo_data,A0
00:000100BE 4200            	    57: 	clr.b	D0
00:000100C0 13C000000407    	    58: .3	move.b	D0,VDC_CURRENT_SPRITE
00:000100C6 227C00000420    	    59: 	movea.l	#VDC_SPRITE_X_MSB,A1
00:000100CC 12D8            	    60: .4	move.b	(A0)+,(A1)+
00:000100CE B3FC00000427    	    61: 	cmpa.l	#VDC_SPRITE_X_MSB+7,A1
00:000100D4 6600FFF6        	    62: 	bne	.4
00:000100D8 5240            	    63: 	addq	#1,D0
00:000100DA B1FC00010218    	    64: 	cmpa.l	#logo_data+56,A0
00:000100E0 6600FFDE        	    65: 	bne	.3
                            	    66: 
                            	    67: ; set variable for letter wobble
00:000100E4 11FC00403000    	    68: 	move.b	#$40,LOGO_ANIMATION.w
                            	    69: 
                            	    70: ; set raster irq on scanline 159
00:000100EA 13FC009F0000040F	    71: 	move.b	#$9f,VDC_IRQ_SCANLINE_LSB		; rasterline 159
00:000100F2 13FC000100000401	    72: 	move.b	#%00000001,VDC_CR			; enable irq's for vdc
                            	    73: 
                            	    74: 
00:000100FA 46FC0200        	    75: 	move.w	#$0200,SR				; set status register (User Mode, ipl = 0)
                            	    76: 
00:000100FE 4EB9000101A6    	    77: 	jsr	sound_reset
                            	    78: 
00:00010104 6000FFFE        	    79: .5	bra	.5					; loop forever, wait for events
                            	    80: 
                            	    81: exc_addr_error
00:00010108 6000FFFE        	    82: 	bra	exc_addr_error				; TODO: bsod when this happens?
                            	    83: 
                            	    84: exc_lvl1_irq_auto
00:0001010C 4E73            	    85: 	rte
                            	    86: 
                            	    87: exc_lvl4_irq_auto					; coupled to timer
00:0001010E 48E7C080        	    88: 	movem.l	D0-D1/A0,-(SP)
                            	    89: 
00:00010112 207C00000100    	    90: 	movea.l	#VEC_TIMER0,A0
00:00010118 103C0001        	    91: 	move.b	#%00000001,D0	; D0 contains the bit to be tested
                            	    92: 
00:0001011C 1200            	    93: .1	move.b	D0,D1		; copy D0 to D1
00:0001011E C2380440        	    94: 	and.b	TIMER_SR.w,D1
00:00010122 6600000C        	    95: 	bne	.2		; it was this timer
00:00010126 5848            	    96: 	addq	#4,A0
00:00010128 E300            	    97: 	asl.b	D0
00:0001012A 6700000C        	    98: 	beq	.3
00:0001012E 60EC            	    99: 	bra.s	.1
                            	   100: 
                            	   101: 	; code for dealing with this timer
00:00010130 11C00440        	   102: .2	move.b	D0,TIMER_SR.w	; confirm this irq
00:00010134 2050            	   103: 	movea.l	(A0),A0
00:00010136 4E90            	   104: 	jsr	(A0)
                            	   105: 
00:00010138 4CDF0103        	   106: .3	movem.l	(SP)+,D0-D1/A0
00:0001013C 4E73            	   107: 	rte
                            	   108: 
                            	   109: exc_lvl6_irq_auto				; coupled to vdc
00:0001013E 2F00            	   110: 	move.l	D0,-(SP)
00:00010140 1F3900000407    	   111: 	move.b	VDC_CURRENT_SPRITE,-(SP)
                            	   112: 
00:00010146 10380400        	   113: 	move.b	VDC_SR.w,D0
00:0001014A 67000042        	   114: 	beq	.end
00:0001014E 11C00400        	   115: 	move.b	D0,VDC_SR.w			; acknowledge irq
                            	   116: 
00:00010152 103900003000    	   117: 	move.b	LOGO_ANIMATION,D0
00:00010158 5200            	   118: 	addq.b	#$1,D0
00:0001015A B03C0090        	   119: 	cmp.b	#$90,D0
00:0001015E 6600000C        	   120: 	bne	.1
00:00010162 13FC000100000481	   121: 	move.b	#%00000001,CORE_CR		; activate irq's fof binary insert
                            	   122: 						; this makes sure letters wobble at least 1 time
00:0001016A 4200            	   123: 	clr.b	D0
00:0001016C 13C000003000    	   124: .1	move.b	D0,LOGO_ANIMATION
                            	   125: 
00:00010172 13FC000400000407	   126: 	move.b	#$4,VDC_CURRENT_SPRITE
00:0001017A 13FC005000000423	   127: 	move.b	#80,VDC_SPRITE_Y_LSB
                            	   128: 
00:00010182 103900000421    	   129: 	move.b	VDC_SPRITE_X_LSB,D0
00:00010188 903900003000    	   130: 	sub.b	LOGO_ANIMATION,D0
                            	   131: 
00:0001018E 11F804880404    	   132: .end	move.b	CORE_INPUT0.w,VDC_BG_COLOR.w
00:00010194 13DF00000407    	   133: 	move.b	(SP)+,VDC_CURRENT_SPRITE
00:0001019A 201F            	   134: 	move.l	(SP)+,D0
00:0001019C 4E73            	   135: 	rte
                            	   136: 
                            	   137: timer_default_handler
00:0001019E 11FC00120404    	   138: 	move.b	#$12,VDC_BG_COLOR.w
00:000101A4 4E75            	   139: 	rts
                            	   140: 
                            	   141: sound_reset
00:000101A6 207C00000500    	   142: 	movea.l	#SID0_F,A0
00:000101AC 4218            	   143: .1	clr.b	(A0)+
00:000101AE B1FC00000540    	   144: 	cmpa.l	#SID0_F+$40,A0
00:000101B4 6600FFF6        	   145: 	bne	.1
00:000101B8 103C007F        	   146: 	move.b	#$7f,D0
00:000101BC 207C00000580    	   147: 	movea.l	#MIX_SID0_LEFT,A0
00:000101C2 10C0            	   148: .2	move.b	D0,(A0)+
00:000101C4 B1FC00000588    	   149: 	cmpa.l	#MIX_SID0_LEFT+$8,A0
00:000101CA 6600FFF6        	   150: 	bne	.2
00:000101CE 13FC000F0000051B	   151: 	move.b	#$f,SID0_V
00:000101D6 13FC000F0000053B	   152: 	move.b	#$f,SID1_V
00:000101DE 4E75            	   153: 	rts
                            	   154: 
                            	   155: logo_data
00:000101E0 00              	   156: 	dc.b	0,112,0,64,%111,0,$1c	; icon top left
00:000101E1 70
00:000101E2 00
00:000101E3 40
00:000101E4 07
00:000101E5 00
00:000101E6 1C
00:000101E7 00              	   157: 	dc.b	0,120,0,64,%111,0,$1d	; icon top right
00:000101E8 78
00:000101E9 00
00:000101EA 40
00:000101EB 07
00:000101EC 00
00:000101ED 1D
00:000101EE 00              	   158: 	dc.b	0,112,0,72,%111,0,$1e	; icon bottom left
00:000101EF 70
00:000101F0 00
00:000101F1 48
00:000101F2 07
00:000101F3 00
00:000101F4 1E
00:000101F5 00              	   159: 	dc.b	0,120,0,72,%111,0,$1f	; icon bottom right
00:000101F6 78
00:000101F7 00
00:000101F8 48
00:000101F9 07
00:000101FA 00
00:000101FB 1F
00:000101FC 00              	   160: 	dc.b	0,107,0,80,%111,0,$6c	; l
00:000101FD 6B
00:000101FE 00
00:000101FF 50
00:00010200 07
00:00010201 00
00:00010202 6C
00:00010203 00              	   161: 	dc.b	0,112,0,80,%111,0,$69	; i
00:00010204 70
00:00010205 00
00:00010206 50
00:00010207 07
00:00010208 00
00:00010209 69
00:0001020A 00              	   162: 	dc.b	0,118,0,80,%111,0,$6d	; m
00:0001020B 76
00:0001020C 00
00:0001020D 50
00:0001020E 07
00:0001020F 00
00:00010210 6D
00:00010211 00              	   163: 	dc.b	0,126,0,80,%111,0,$65	; e
00:00010212 7E
00:00010213 00
00:00010214 50
00:00010215 07
00:00010216 00
00:00010217 65
                            	   164: 
                            	   165: logo_tiles
00:00010218 00              	   166: 	dc.b	%00000000,%00000000	; tile 1 (icon upper left)
00:00010219 00
00:0001021A 01              	   167: 	dc.b	%00000001,%00000000
00:0001021B 00
00:0001021C 07              	   168: 	dc.b	%00000111,%10000000
00:0001021D 80
00:0001021E 07              	   169: 	dc.b	%00000111,%10100000
00:0001021F A0
00:00010220 1E              	   170: 	dc.b	%00011110,%11111000
00:00010221 F8
00:00010222 1E              	   171: 	dc.b	%00011110,%10101111
00:00010223 AF
00:00010224 1E              	   172: 	dc.b	%00011110,%10101010
00:00010225 AA
00:00010226 1E              	   173: 	dc.b	%00011110,%10101111
00:00010227 AF
                            	   174: 
00:00010228 00              	   175: 	dc.b	%00000000,%00000000	; tile 2 (icon upper right)
00:00010229 00
00:0001022A 00              	   176: 	dc.b	%00000000,%00000000
00:0001022B 00
00:0001022C 00              	   177: 	dc.b	%00000000,%00000000
00:0001022D 00
00:0001022E 00              	   178: 	dc.b	%00000000,%00000000
00:0001022F 00
00:00010230 00              	   179: 	dc.b	%00000000,%00000000
00:00010231 00
00:00010232 00              	   180: 	dc.b	%00000000,%00000000
00:00010233 00
00:00010234 C0              	   181: 	dc.b	%11000000,%00000000
00:00010235 00
00:00010236 B0              	   182: 	dc.b	%10110000,%00000000
00:00010237 00
                            	   183: 
00:00010238 1E              	   184: 	dc.b	%00011110,%11111010	; tile 3 (icon bottom left)
00:00010239 FA
00:0001023A 07              	   185: 	dc.b	%00000111,%10101010
00:0001023B AA
00:0001023C 07              	   186: 	dc.b	%00000111,%10101011
00:0001023D AB
00:0001023E 01              	   187: 	dc.b	%00000001,%11101011
00:0001023F EB
00:00010240 00              	   188: 	dc.b	%00000000,%01111110
00:00010241 7E
00:00010242 00              	   189: 	dc.b	%00000000,%00010111
00:00010243 17
00:00010244 00              	   190: 	dc.b	%00000000,%00000001
00:00010245 01
00:00010246 00              	   191: 	dc.b	%00000000,%00000000
00:00010247 00
                            	   192: 
00:00010248 EC              	   193: 	dc.b	%11101100,%00000000	; tile 4 (icon bottom right)
00:00010249 00
00:0001024A EE              	   194: 	dc.b	%11101110,%00000000
00:0001024B 00
00:0001024C AB              	   195: 	dc.b	%10101011,%10000000
00:0001024D 80
00:0001024E AB              	   196: 	dc.b	%10101011,%10100000
00:0001024F A0
00:00010250 AA              	   197: 	dc.b	%10101010,%11110100
00:00010251 F4
00:00010252 FF              	   198: 	dc.b	%11111111,%01010000
00:00010253 50
00:00010254 55              	   199: 	dc.b	%01010101,%00000000
00:00010255 00
00:00010256 00              	   200: 	dc.b	%00000000,%00000000
00:00010257 00
                            	   201: 


Symbols by name:
CORE_CR                          E:00000481
CORE_INPUT0                      E:00000488
CORE_ROMS                        E:00000482
LOGO_ANIMATION                   E:00003000
MIX_SID0_LEFT                    E:00000580
SID0_F                           E:00000500
SID0_V                           E:0000051B
SID1_V                           E:0000053B
TIMER_SR                         E:00000440
VDC_BG_COLOR                     E:00000404
VDC_CR                           E:00000401
VDC_CURRENT_SPRITE               E:00000407
VDC_IRQ_SCANLINE_LSB             E:0000040F
VDC_SPRITE_X_LSB                 E:00000421
VDC_SPRITE_X_MSB                 E:00000420
VDC_SPRITE_Y_LSB                 E:00000423
VDC_SR                           E:00000400
VDC_TILESET1                     E:00001000
VEC_ADDR_ERROR                   E:0000000C
VEC_LVL1_IRQ_AUTO                E:00000064
VEC_LVL4_IRQ_AUTO                E:00000070
VEC_LVL6_IRQ_AUTO                E:00000078
VEC_TIMER0                       E:00000100
VEC_TIMER1                       E:00000104
VEC_TIMER2                       E:00000108
VEC_TIMER3                       E:0000010C
VEC_TIMER4                       E:00000110
VEC_TIMER5                       E:00000114
VEC_TIMER6                       E:00000118
VEC_TIMER7                       E:0000011C
_start                           A:00010020
exc_addr_error                   A:00010108
exc_lvl1_irq_auto                A:0001010C
exc_lvl4_irq_auto                A:0001010E
exc_lvl6_irq_auto                A:0001013E
logo_data                        A:000101E0
logo_tiles                       A:00010218
sound_reset                      A:000101A6
timer_default_handler            A:0001019E

Symbols by value:
0000000C VEC_ADDR_ERROR
00000064 VEC_LVL1_IRQ_AUTO
00000070 VEC_LVL4_IRQ_AUTO
00000078 VEC_LVL6_IRQ_AUTO
00000100 VEC_TIMER0
00000104 VEC_TIMER1
00000108 VEC_TIMER2
0000010C VEC_TIMER3
00000110 VEC_TIMER4
00000114 VEC_TIMER5
00000118 VEC_TIMER6
0000011C VEC_TIMER7
00000400 VDC_SR
00000401 VDC_CR
00000404 VDC_BG_COLOR
00000407 VDC_CURRENT_SPRITE
0000040F VDC_IRQ_SCANLINE_LSB
00000420 VDC_SPRITE_X_MSB
00000421 VDC_SPRITE_X_LSB
00000423 VDC_SPRITE_Y_LSB
00000440 TIMER_SR
00000481 CORE_CR
00000482 CORE_ROMS
00000488 CORE_INPUT0
00000500 SID0_F
0000051B SID0_V
0000053B SID1_V
00000580 MIX_SID0_LEFT
00001000 VDC_TILESET1
00003000 LOGO_ANIMATION
00010020 _start
00010108 exc_addr_error
0001010C exc_lvl1_irq_auto
0001010E exc_lvl4_irq_auto
0001013E exc_lvl6_irq_auto
0001019E timer_default_handler
000101A6 sound_reset
000101E0 logo_data
00010218 logo_tiles
