Sections:
00: "seg10000" (10000-102F4)


Source: "rom.s"
                            	     1: ; ----------------------------------------------------------------------
                            	     2: ; rom.s (assembles with vasmm68k_mot)
                            	     3: ; lime
                            	     4: ;
                            	     5: ; Copyright © 2025 elmerucr. All rights reserved.
                            	     6: ; ----------------------------------------------------------------------
                            	     7: 
                            	     8: 	include	"definitions.i"

Source: "definitions.i"
                            	     1: ; ----------------------------------------------------------------------
                            	     2: ; definitions.i
                            	     3: ; lime
                            	     4: ;
                            	     5: ; Copyright © 2025 elmerucr. All rights reserved.
                            	     6: ; ----------------------------------------------------------------------
                            	     7: 
                            	     8: ; vectors
                            	     9: VEC_ADDR_ERROR			equ	$000c
                            	    10: VEC_LVL1_IRQ_AUTO		equ	$0064
                            	    11: VEC_LVL2_IRQ_AUTO		equ	$0068	; entry point for core
                            	    12: VEC_LVL4_IRQ_AUTO		equ	$0070	; entry point for timer
                            	    13: VEC_LVL6_IRQ_AUTO		equ	$0078	; entry point for vdc
                            	    14: VEC_TIMER0			equ	$0100
                            	    15: VEC_TIMER1			equ	$0104
                            	    16: VEC_TIMER2			equ	$0108
                            	    17: VEC_TIMER3			equ	$010c
                            	    18: VEC_TIMER4			equ	$0110
                            	    19: VEC_TIMER5			equ	$0114
                            	    20: VEC_TIMER6			equ	$0118
                            	    21: VEC_TIMER7			equ	$011c
                            	    22: 
                            	    23: ; vdc (video display controller)
                            	    24: VDC_SR				equ	$0400
                            	    25: VDC_CR				equ	$0401
                            	    26: VDC_BG_COLOR			equ	$0404
                            	    27: VDC_CURRENT_LAYER		equ	$0406
                            	    28: VDC_CURRENT_SPRITE		equ	$0407
                            	    29: VDC_CURRENT_SCANLINE_MSB	equ	$040c
                            	    30: VDC_CURRENT_SCANLINE_LSB	equ	$040d
                            	    31: VDC_IRQ_SCANLINE_MSB		equ	$040e
                            	    32: VDC_IRQ_SCANLINE_LSB		equ	$040f
                            	    33: 
                            	    34: VDC_LAYER_X_MSB			equ	$0410
                            	    35: VDC_LAYER_X_LSB			equ	$0411
                            	    36: VDC_LAYER_Y_MSB			equ	$0412
                            	    37: VDC_LAYER_Y_LSB			equ	$0413
                            	    38: VDC_LAYER_FLAGS0		equ	$0414
                            	    39: VDC_LAYER_FLAGS1		equ	$0415
                            	    40: VDC_LAYER_BASE_MSB		equ	$0416
                            	    41: VDC_LAYER_BASE_LSB		equ	$0417
                            	    42: VDC_LAYER_COLOR0		equ	$0418
                            	    43: VDC_LAYER_COLOR1		equ	$0419
                            	    44: VDC_LAYER_COLOR2		equ	$041a
                            	    45: VDC_LAYER_COLOR3		equ	$041b
                            	    46: 
                            	    47: VDC_SPRITE_X_MSB		equ	$0420
                            	    48: VDC_SPRITE_X_LSB		equ	$0421
                            	    49: VDC_SPRITE_Y_MSB		equ	$0422
                            	    50: VDC_SPRITE_Y_LSB		equ	$0423
                            	    51: VDC_SPRITE_COLOR0		equ	$0428
                            	    52: VDC_SPRITE_COLOR1		equ	$0429
                            	    53: VDC_SPRITE_COLOR2		equ	$042a
                            	    54: VDC_SPRITE_COLOR3		equ	$042b
                            	    55: 
                            	    56: VDC_TILESET0			equ	$0800
                            	    57: VDC_TILESET1			equ	$1000
                            	    58: 
                            	    59: VDC_LAYER0			equ	$2000
                            	    60: VDC_LAYER1			equ	$2800
                            	    61: VDC_LAYER2			equ	$3000
                            	    62: VDC_LAYER3			equ	$3800
                            	    63: 
                            	    64: ; sound devices
                            	    65: SID0_F				equ	$0500
                            	    66: SID0_PW				equ	$0502
                            	    67: SID0_V				equ	$051b
                            	    68: SID1_V				equ	$053b
                            	    69: MIX_SID0_LEFT			equ	$0580
                            	    70: MIX_SID0_RIGHT			equ	$0581
                            	    71: MIX_SID1_LEFT			equ	$0582
                            	    72: MIX_SID1_RIGHT			equ	$0583
                            	    73: MIX_ANA0_LEFT			equ	$0584
                            	    74: MIX_ANA0_RIGHT			equ	$0585
                            	    75: MIX_ANA1_LEFT			equ	$0586
                            	    76: MIX_ANA1_RIGHT			equ	$0587
                            	    77: 
                            	    78: ; timer
                            	    79: TIMER_SR			equ	$0440
                            	    80: TIMER_CR			equ	$0441
                            	    81: TIMER0_BPM			equ	$0450
                            	    82: TIMER1_BPM			equ	$0452
                            	    83: TIMER2_BPM			equ	$0454
                            	    84: TIMER3_BPM			equ	$0456
                            	    85: TIMER4_BPM			equ	$0458
                            	    86: TIMER5_BPM			equ	$045a
                            	    87: TIMER6_BPM			equ	$045c
                            	    88: TIMER7_BPM			equ	$045e
                            	    89: 
                            	    90: ; core
                            	    91: CORE_SR				equ	$0480
                            	    92: CORE_CR				equ	$0481
                            	    93: CORE_ROMS			equ	$0482
                            	    94: CORE_INPUT0			equ	$0488

Source: "rom.s"
                            	     9: 
                            	    10: LOGO_ANIMATION	equ	$4000
                            	    11: 
                            	    12: 
                            	    13: 	org	$00010000	; rom based at $10000
                            	    14: 
00:00010000 01000000        	    15: 	dc.l	$01000000	; initial ssp at end of ram
00:00010004 00010020        	    16: 	dc.l	_start		; reset vector
                            	    17: 
00:00010008 726F6D206D633638	    18: 	dc.b	"rom mc68000 0.4 20251026"
00:00010010 30303020302E3420
00:00010018 3230323531303236
                            	    19: 
                            	    20: 	align	2
                            	    21: 
                            	    22: _start
00:00010020 4EB9000101C4    	    23: 	jsr	fill_vector_table
                            	    24: 
                            	    25: 	; set usp
00:00010026 207C00010000    	    26: 	move.l	#$00010000,A0
00:0001002C 4E60            	    27: 	move.l	A0,USP
                            	    28: 
00:0001002E 4EB90001022E    	    29: 	jsr	vdc_init_layer0
00:00010034 4EB90001025A    	    30: 	jsr	vdc_copy_rom_font
                            	    31: 
                            	    32: ; copy logo tiles
00:0001003A 207C000102B4    	    33: 	movea.l	#logo_tiles,A0
00:00010040 327C11C0        	    34: 	movea.w	#$11c0,A1		; use 4 tiles $1c to $1f
00:00010044 12D8            	    35: .1	move.b	(A0)+,(A1)+
00:00010046 B1FC000102F4    	    36: 	cmpa.l	#logo_tiles+64,A0
00:0001004C 6600FFF6        	    37: 	bne	.1
                            	    38: 
                            	    39: ; init logo
00:00010050 207C0001027C    	    40: 	movea.l	#logo_data,A0
00:00010056 4200            	    41: 	clr.b	D0
00:00010058 13C000000407    	    42: .2	move.b	D0,VDC_CURRENT_SPRITE
00:0001005E 227C00000420    	    43: 	movea.l	#VDC_SPRITE_X_MSB,A1
00:00010064 12D8            	    44: .3	move.b	(A0)+,(A1)+
00:00010066 B3FC00000427    	    45: 	cmpa.l	#VDC_SPRITE_X_MSB+7,A1
00:0001006C 6600FFF6        	    46: 	bne	.3
00:00010070 5240            	    47: 	addq	#1,D0
00:00010072 B1FC000102B4    	    48: 	cmpa.l	#logo_data+56,A0
00:00010078 6600FFDE        	    49: 	bne	.2
                            	    50: 
                            	    51: ; set variable for letter wobble
00:0001007C 11FC00684000    	    52: 	move.b	#$68,LOGO_ANIMATION.w
                            	    53: 
                            	    54: ; set raster irq on scanline 179
00:00010082 13FC00B30000040F	    55: 	move.b	#$b3,VDC_IRQ_SCANLINE_LSB		; rasterline 179
00:0001008A 13FC000100000401	    56: 	move.b	#%00000001,VDC_CR			; enable irq's for vdc
                            	    57: 
                            	    58: 
00:00010092 46FC0000        	    59: 	move.w	#$0000,SR				; set status register (User Mode, ipl = 0)
                            	    60: 
00:00010096 4EB90001018A    	    61: 	jsr	sound_reset
                            	    62: 
00:0001009C 103C0000        	    63: 	move.b	#0,D0
00:000100A0 B03C0004        	    64: loop	cmp.b	#4,D0
00:000100A4 5200            	    65: 	addq.b	#1,D0
                            	    66: 
00:000100A6 6000FFF8        	    67: 	bra	loop					; loop forever, wait for events
                            	    68: 
                            	    69: exc_addr_error
00:000100AA 6000FFFE        	    70: 	bra	exc_addr_error				; TODO: bsod when this happens?
                            	    71: 
                            	    72: exc_lvl1_irq_auto
00:000100AE 4E73            	    73: 	rte
                            	    74: 
                            	    75: exc_lvl2_irq_auto
00:000100B0 1F00            	    76: 	move.b	D0,-(SP)
                            	    77: 
00:000100B2 103900000480    	    78: 	move.b	CORE_SR,D0				; did core cause an irq?
00:000100B8 67000016        	    79: 	beq	.1					; no
00:000100BC 13C000000480    	    80: 	move.b	D0,CORE_SR				; yes, acknowledge
00:000100C2 423900000407    	    81: 	clr.b	VDC_CURRENT_SPRITE
00:000100C8 523900000429    	    82: 	addq.b	#1,VDC_SPRITE_COLOR1
                            	    83: 
00:000100CE 101F            	    84: 	move.b	(SP)+,D0
00:000100D0 4E73            	    85: .1	rte
                            	    86: 
                            	    87: exc_lvl4_irq_auto					; coupled to timer
00:000100D2 48E7C080        	    88: 	movem.l	D0-D1/A0,-(SP)
                            	    89: 
00:000100D6 207C00000100    	    90: 	movea.l	#VEC_TIMER0,A0
00:000100DC 103C0001        	    91: 	move.b	#%00000001,D0	; D0 contains the bit to be tested
                            	    92: 
00:000100E0 1200            	    93: .1	move.b	D0,D1		; copy D0 to D1
00:000100E2 C2380440        	    94: 	and.b	TIMER_SR.w,D1
00:000100E6 6600000C        	    95: 	bne	.2		; it was this timer
00:000100EA 5848            	    96: 	addq	#4,A0
00:000100EC E300            	    97: 	asl.b	D0
00:000100EE 6700000C        	    98: 	beq	.3
00:000100F2 60EC            	    99: 	bra.s	.1
                            	   100: 
                            	   101: 	; code for dealing with this timer
00:000100F4 11C00440        	   102: .2	move.b	D0,TIMER_SR.w	; confirm this irq
00:000100F8 2050            	   103: 	movea.l	(A0),A0
00:000100FA 4E90            	   104: 	jsr	(A0)
                            	   105: 
00:000100FC 4CDF0103        	   106: .3	movem.l	(SP)+,D0-D1/A0
00:00010100 4E73            	   107: 	rte
                            	   108: 
                            	   109: exc_lvl6_irq_auto				; coupled to vdc
00:00010102 48E7C000        	   110: 	movem.l	D0-D1,-(SP)
00:00010106 1F3900000407    	   111: 	move.b	VDC_CURRENT_SPRITE,-(SP)
                            	   112: 
00:0001010C 10380400        	   113: 	move.b	VDC_SR.w,D0
00:00010110 6700005E        	   114: 	beq	.end
00:00010114 11C00400        	   115: 	move.b	D0,VDC_SR.w			; acknowledge irq
                            	   116: 
00:00010118 103900004000    	   117: 	move.b	LOGO_ANIMATION,D0
00:0001011E 5200            	   118: 	addq.b	#$1,D0
00:00010120 B03C00B8        	   119: 	cmp.b	#$b8,D0
00:00010124 6600000E        	   120: 	bne	.1
00:00010128 13FC000100000481	   121: 	move.b	#%00000001,CORE_CR		; activate irq's for binary insert
                            	   122: 						; this makes sure letters wobble at least 1 time
00:00010130 103C0048        	   123: 	move.b	#$48,D0
                            	   124: 
00:00010134 13C000004000    	   125: .1	move.b	D0,LOGO_ANIMATION
                            	   126: 
00:0001013A 123C0004        	   127: 	move.b	#4,D1				; start with sprite 4 (letter 'l')
00:0001013E 13C100000407    	   128: .2	move.b	D1,VDC_CURRENT_SPRITE
00:00010144 13FC005A00000423	   129: 	move.b	#90,VDC_SPRITE_Y_LSB		; base position for each letter
                            	   130: 
00:0001014C 103900000421    	   131: 	move.b	VDC_SPRITE_X_LSB,D0		; store x for current sprite in D0
00:00010152 903900004000    	   132: 	sub.b	LOGO_ANIMATION,D0		; subtract logo_an x value from D0
                            	   133: 
00:00010158 B03C0008        	   134: 	cmp.b	#8,D0
00:0001015C 64000008        	   135: 	bcc	.3				; if more than 8, jump to .3
                            	   136: 
00:00010160 533900000423    	   137: 	subq.b	#1,VDC_SPRITE_Y_LSB		; move letter up 1 pixel
                            	   138: 
00:00010166 5241            	   139: .3	addq	#1,D1				; move to next sprite
00:00010168 B23C0008        	   140: 	cmp.b	#8,D1				; did we reach sprite 8?
00:0001016C 6600FFD0        	   141: 	bne	.2				; not yet, jump to .2
                            	   142: 
00:00010170 11F804880404    	   143: .end	move.b	CORE_INPUT0.w,VDC_BG_COLOR.w
                            	   144: 	;add.w	#1,$410	; TODO remove
                            	   145: 	;add.w	#1,$412	; TODO remove
00:00010176 13DF00000407    	   146: 	move.b	(SP)+,VDC_CURRENT_SPRITE
00:0001017C 4CDF0003        	   147: 	movem.l	(SP)+,D0-D1
00:00010180 4E73            	   148: 	rte
                            	   149: 
                            	   150: timer_default_handler
00:00010182 11FC00120404    	   151: 	move.b	#$12,VDC_BG_COLOR.w
00:00010188 4E75            	   152: 	rts
                            	   153: 
                            	   154: sound_reset
00:0001018A 207C00000500    	   155: 	movea.l	#SID0_F,A0
00:00010190 4218            	   156: .1	clr.b	(A0)+
00:00010192 B1FC00000540    	   157: 	cmpa.l	#SID0_F+$40,A0
00:00010198 6600FFF6        	   158: 	bne	.1
00:0001019C 103C007F        	   159: 	move.b	#$7f,D0
00:000101A0 207C00000580    	   160: 	movea.l	#MIX_SID0_LEFT,A0
00:000101A6 10C0            	   161: .2	move.b	D0,(A0)+
00:000101A8 B1FC00000588    	   162: 	cmpa.l	#MIX_SID0_LEFT+$8,A0
00:000101AE 6600FFF6        	   163: 	bne	.2
00:000101B2 13FC000F0000051B	   164: 	move.b	#$f,SID0_V
00:000101BA 13FC000F0000053B	   165: 	move.b	#$f,SID1_V
00:000101C2 4E75            	   166: 	rts
                            	   167: 
                            	   168: fill_vector_table
00:000101C4 21FC000100AA000C	   169: 	move.l	#exc_addr_error,VEC_ADDR_ERROR.w
00:000101CC 21FC000100AE0064	   170: 	move.l	#exc_lvl1_irq_auto,VEC_LVL1_IRQ_AUTO.w
00:000101D4 21FC000100B00068	   171: 	move.l	#exc_lvl2_irq_auto,VEC_LVL2_IRQ_AUTO.w
00:000101DC 21FC000100D20070	   172: 	move.l	#exc_lvl4_irq_auto,VEC_LVL4_IRQ_AUTO.w
00:000101E4 21FC000101020078	   173: 	move.l	#exc_lvl6_irq_auto,VEC_LVL6_IRQ_AUTO.w
00:000101EC 21FC000101820100	   174: 	move.l	#timer_default_handler,VEC_TIMER0.w
00:000101F4 21FC000101820104	   175: 	move.l	#timer_default_handler,VEC_TIMER1.w
00:000101FC 21FC000101820108	   176: 	move.l	#timer_default_handler,VEC_TIMER2.w
00:00010204 21FC00010182010C	   177: 	move.l	#timer_default_handler,VEC_TIMER3.w
00:0001020C 21FC000101820110	   178: 	move.l	#timer_default_handler,VEC_TIMER4.w
00:00010214 21FC000101820114	   179: 	move.l	#timer_default_handler,VEC_TIMER5.w
00:0001021C 21FC000101820118	   180: 	move.l	#timer_default_handler,VEC_TIMER6.w
00:00010224 21FC00010182011C	   181: 	move.l	#timer_default_handler,VEC_TIMER7.w
00:0001022C 4E75            	   182: 	rts
                            	   183: 
                            	   184: ; make layer0 visible and clear
                            	   185: vdc_init_layer0
00:0001022E 2F08            	   186: 	move.l	A0,-(SP)
00:00010230 1F380406        	   187: 	move.b	VDC_CURRENT_LAYER.w,-(SP)
00:00010234 42380406        	   188: 	clr.b	VDC_CURRENT_LAYER.w	; make layer 0 current
00:00010238 11FC00070414    	   189: 	move.b	#7,VDC_LAYER_FLAGS0.w
00:0001023E 207C00002000    	   190: 	movea.l	#VDC_LAYER0,A0
                            	   191: 
00:00010244 10FC0020        	   192: .1	move.b	#' ',(A0)+
00:00010248 B1FC00002800    	   193: 	cmpa.l	#VDC_LAYER0+$800,A0
00:0001024E 6600FFF4        	   194: 	bne	.1
                            	   195: 
00:00010252 11DF0406        	   196: 	move.b	(SP)+,VDC_CURRENT_LAYER.w
00:00010256 205F            	   197: 	move.l	(SP)+,A0
00:00010258 4E75            	   198: 	rts
                            	   199: 
                            	   200: vdc_copy_rom_font
00:0001025A 2F08            	   201: 	move.l	A0,-(SP)
00:0001025C 1F380482        	   202: 	move.b	CORE_ROMS.w,-(SP)
                            	   203: 
00:00010260 003800020482    	   204: 	or.b	#%00000010,CORE_ROMS.w			; make rom font visible to cpu
00:00010266 307C1000        	   205: 	movea	#VDC_TILESET1,A0
                            	   206: 
00:0001026A 20D0            	   207: .1	move.l	(A0),(A0)+				; copy rom font to underlying ram
00:0001026C B0FC2000        	   208: 	cmpa	#VDC_TILESET1+$1000,A0
00:00010270 6600FFF8        	   209: 	bne	.1
                            	   210: 
00:00010274 11DF0482        	   211: 	move.b	(SP)+,CORE_ROMS.w
00:00010278 205F            	   212: 	move.l	(SP)+,A0
00:0001027A 4E75            	   213: 	rts
                            	   214: 
                            	   215: logo_data
00:0001027C 00              	   216: 	dc.b	0,152,0,74,%111,0,$1c	; icon top left
00:0001027D 98
00:0001027E 00
00:0001027F 4A
00:00010280 07
00:00010281 00
00:00010282 1C
00:00010283 00              	   217: 	dc.b	0,160,0,74,%111,0,$1d	; icon top right
00:00010284 A0
00:00010285 00
00:00010286 4A
00:00010287 07
00:00010288 00
00:00010289 1D
00:0001028A 00              	   218: 	dc.b	0,152,0,82,%111,0,$1e	; icon bottom left
00:0001028B 98
00:0001028C 00
00:0001028D 52
00:0001028E 07
00:0001028F 00
00:00010290 1E
00:00010291 00              	   219: 	dc.b	0,160,0,82,%111,0,$1f	; icon bottom right
00:00010292 A0
00:00010293 00
00:00010294 52
00:00010295 07
00:00010296 00
00:00010297 1F
00:00010298 00              	   220: 	dc.b	0,147,0,90,%111,0,$6c	; l
00:00010299 93
00:0001029A 00
00:0001029B 5A
00:0001029C 07
00:0001029D 00
00:0001029E 6C
00:0001029F 00              	   221: 	dc.b	0,152,0,90,%111,0,$69	; i
00:000102A0 98
00:000102A1 00
00:000102A2 5A
00:000102A3 07
00:000102A4 00
00:000102A5 69
00:000102A6 00              	   222: 	dc.b	0,158,0,90,%111,0,$6d	; m
00:000102A7 9E
00:000102A8 00
00:000102A9 5A
00:000102AA 07
00:000102AB 00
00:000102AC 6D
00:000102AD 00              	   223: 	dc.b	0,166,0,90,%111,0,$65	; e
00:000102AE A6
00:000102AF 00
00:000102B0 5A
00:000102B1 07
00:000102B2 00
00:000102B3 65
                            	   224: 
                            	   225: logo_tiles
00:000102B4 00              	   226: 	dc.b	%00000000,%00000000	; tile 1 (icon upper left)
00:000102B5 00
00:000102B6 01              	   227: 	dc.b	%00000001,%00000000
00:000102B7 00
00:000102B8 07              	   228: 	dc.b	%00000111,%10000000
00:000102B9 80
00:000102BA 07              	   229: 	dc.b	%00000111,%10100000
00:000102BB A0
00:000102BC 1E              	   230: 	dc.b	%00011110,%11111000
00:000102BD F8
00:000102BE 1E              	   231: 	dc.b	%00011110,%10101111
00:000102BF AF
00:000102C0 1E              	   232: 	dc.b	%00011110,%10101010
00:000102C1 AA
00:000102C2 1E              	   233: 	dc.b	%00011110,%10101111
00:000102C3 AF
                            	   234: 
00:000102C4 00              	   235: 	dc.b	%00000000,%00000000	; tile 2 (icon upper right)
00:000102C5 00
00:000102C6 00              	   236: 	dc.b	%00000000,%00000000
00:000102C7 00
00:000102C8 00              	   237: 	dc.b	%00000000,%00000000
00:000102C9 00
00:000102CA 00              	   238: 	dc.b	%00000000,%00000000
00:000102CB 00
00:000102CC 00              	   239: 	dc.b	%00000000,%00000000
00:000102CD 00
00:000102CE 00              	   240: 	dc.b	%00000000,%00000000
00:000102CF 00
00:000102D0 C0              	   241: 	dc.b	%11000000,%00000000
00:000102D1 00
00:000102D2 B0              	   242: 	dc.b	%10110000,%00000000
00:000102D3 00
                            	   243: 
00:000102D4 1E              	   244: 	dc.b	%00011110,%11111010	; tile 3 (icon bottom left)
00:000102D5 FA
00:000102D6 07              	   245: 	dc.b	%00000111,%10101010
00:000102D7 AA
00:000102D8 07              	   246: 	dc.b	%00000111,%10101011
00:000102D9 AB
00:000102DA 01              	   247: 	dc.b	%00000001,%11101011
00:000102DB EB
00:000102DC 00              	   248: 	dc.b	%00000000,%01111110
00:000102DD 7E
00:000102DE 00              	   249: 	dc.b	%00000000,%00010111
00:000102DF 17
00:000102E0 00              	   250: 	dc.b	%00000000,%00000001
00:000102E1 01
00:000102E2 00              	   251: 	dc.b	%00000000,%00000000
00:000102E3 00
                            	   252: 
00:000102E4 EC              	   253: 	dc.b	%11101100,%00000000	; tile 4 (icon bottom right)
00:000102E5 00
00:000102E6 EE              	   254: 	dc.b	%11101110,%00000000
00:000102E7 00
00:000102E8 AB              	   255: 	dc.b	%10101011,%10000000
00:000102E9 80
00:000102EA AB              	   256: 	dc.b	%10101011,%10100000
00:000102EB A0
00:000102EC AA              	   257: 	dc.b	%10101010,%11110100
00:000102ED F4
00:000102EE FF              	   258: 	dc.b	%11111111,%01010000
00:000102EF 50
00:000102F0 55              	   259: 	dc.b	%01010101,%00000000
00:000102F1 00
00:000102F2 00              	   260: 	dc.b	%00000000,%00000000
00:000102F3 00
                            	   261: 


Symbols by name:
CORE_CR                          E:00000481
CORE_INPUT0                      E:00000488
CORE_ROMS                        E:00000482
CORE_SR                          E:00000480
LOGO_ANIMATION                   E:00004000
MIX_SID0_LEFT                    E:00000580
SID0_F                           E:00000500
SID0_V                           E:0000051B
SID1_V                           E:0000053B
TIMER_SR                         E:00000440
VDC_BG_COLOR                     E:00000404
VDC_CR                           E:00000401
VDC_CURRENT_LAYER                E:00000406
VDC_CURRENT_SPRITE               E:00000407
VDC_IRQ_SCANLINE_LSB             E:0000040F
VDC_LAYER0                       E:00002000
VDC_LAYER_FLAGS0                 E:00000414
VDC_SPRITE_COLOR1                E:00000429
VDC_SPRITE_X_LSB                 E:00000421
VDC_SPRITE_X_MSB                 E:00000420
VDC_SPRITE_Y_LSB                 E:00000423
VDC_SR                           E:00000400
VDC_TILESET1                     E:00001000
VEC_ADDR_ERROR                   E:0000000C
VEC_LVL1_IRQ_AUTO                E:00000064
VEC_LVL2_IRQ_AUTO                E:00000068
VEC_LVL4_IRQ_AUTO                E:00000070
VEC_LVL6_IRQ_AUTO                E:00000078
VEC_TIMER0                       E:00000100
VEC_TIMER1                       E:00000104
VEC_TIMER2                       E:00000108
VEC_TIMER3                       E:0000010C
VEC_TIMER4                       E:00000110
VEC_TIMER5                       E:00000114
VEC_TIMER6                       E:00000118
VEC_TIMER7                       E:0000011C
_start                           A:00010020
exc_addr_error                   A:000100AA
exc_lvl1_irq_auto                A:000100AE
exc_lvl2_irq_auto                A:000100B0
exc_lvl4_irq_auto                A:000100D2
exc_lvl6_irq_auto                A:00010102
fill_vector_table                A:000101C4
logo_data                        A:0001027C
logo_tiles                       A:000102B4
loop                             A:000100A0
sound_reset                      A:0001018A
timer_default_handler            A:00010182
vdc_copy_rom_font                A:0001025A
vdc_init_layer0                  A:0001022E

Symbols by value:
0000000C VEC_ADDR_ERROR
00000064 VEC_LVL1_IRQ_AUTO
00000068 VEC_LVL2_IRQ_AUTO
00000070 VEC_LVL4_IRQ_AUTO
00000078 VEC_LVL6_IRQ_AUTO
00000100 VEC_TIMER0
00000104 VEC_TIMER1
00000108 VEC_TIMER2
0000010C VEC_TIMER3
00000110 VEC_TIMER4
00000114 VEC_TIMER5
00000118 VEC_TIMER6
0000011C VEC_TIMER7
00000400 VDC_SR
00000401 VDC_CR
00000404 VDC_BG_COLOR
00000406 VDC_CURRENT_LAYER
00000407 VDC_CURRENT_SPRITE
0000040F VDC_IRQ_SCANLINE_LSB
00000414 VDC_LAYER_FLAGS0
00000420 VDC_SPRITE_X_MSB
00000421 VDC_SPRITE_X_LSB
00000423 VDC_SPRITE_Y_LSB
00000429 VDC_SPRITE_COLOR1
00000440 TIMER_SR
00000480 CORE_SR
00000481 CORE_CR
00000482 CORE_ROMS
00000488 CORE_INPUT0
00000500 SID0_F
0000051B SID0_V
0000053B SID1_V
00000580 MIX_SID0_LEFT
00001000 VDC_TILESET1
00002000 VDC_LAYER0
00004000 LOGO_ANIMATION
00010020 _start
000100A0 loop
000100AA exc_addr_error
000100AE exc_lvl1_irq_auto
000100B0 exc_lvl2_irq_auto
000100D2 exc_lvl4_irq_auto
00010102 exc_lvl6_irq_auto
00010182 timer_default_handler
0001018A sound_reset
000101C4 fill_vector_table
0001022E vdc_init_layer0
0001025A vdc_copy_rom_font
0001027C logo_data
000102B4 logo_tiles
