Sections:
00: "seg10000" (10000-10330)


Source: "rom.s"
                            	     1: ; ----------------------------------------------------------------------
                            	     2: ; rom.s (assembles with vasmm68k_mot)
                            	     3: ; lime
                            	     4: ;
                            	     5: ; Copyright © 2025 elmerucr. All rights reserved.
                            	     6: ; ----------------------------------------------------------------------
                            	     7: 
                            	     8: 	include	"definitions.i"

Source: "definitions.i"
                            	     1: ; ----------------------------------------------------------------------
                            	     2: ; definitions.i
                            	     3: ; lime
                            	     4: ;
                            	     5: ; Copyright © 2025 elmerucr. All rights reserved.
                            	     6: ; ----------------------------------------------------------------------
                            	     7: 
                            	     8: ; vectors
                            	     9: VEC_ADDR_ERROR			equ	$000c
                            	    10: VEC_LVL1_IRQ_AUTO		equ	$0064
                            	    11: VEC_LVL2_IRQ_AUTO		equ	$0068	; entry point for core
                            	    12: VEC_LVL4_IRQ_AUTO		equ	$0070	; entry point for timer
                            	    13: VEC_LVL6_IRQ_AUTO		equ	$0078	; entry point for vdc
                            	    14: VEC_TIMER0			equ	$0100
                            	    15: VEC_TIMER1			equ	$0104
                            	    16: VEC_TIMER2			equ	$0108
                            	    17: VEC_TIMER3			equ	$010c
                            	    18: VEC_TIMER4			equ	$0110
                            	    19: VEC_TIMER5			equ	$0114
                            	    20: VEC_TIMER6			equ	$0118
                            	    21: VEC_TIMER7			equ	$011c
                            	    22: 
                            	    23: ; vdc (video display controller)
                            	    24: VDC_SR				equ	$0400
                            	    25: VDC_CR				equ	$0401
                            	    26: VDC_BG_COLOR			equ	$0404
                            	    27: VDC_CURRENT_LAYER		equ	$0406
                            	    28: VDC_CURRENT_SPRITE		equ	$0407
                            	    29: VDC_CURRENT_SCANLINE_MSB	equ	$040c
                            	    30: VDC_CURRENT_SCANLINE_LSB	equ	$040d
                            	    31: VDC_IRQ_SCANLINE_MSB		equ	$040e
                            	    32: VDC_IRQ_SCANLINE_LSB		equ	$040f
                            	    33: 
                            	    34: VDC_LAYER_X_MSB			equ	$0410
                            	    35: VDC_LAYER_X_LSB			equ	$0411
                            	    36: VDC_LAYER_Y_MSB			equ	$0412
                            	    37: VDC_LAYER_Y_LSB			equ	$0413
                            	    38: VDC_LAYER_FLAGS0		equ	$0414
                            	    39: VDC_LAYER_FLAGS1		equ	$0415
                            	    40: VDC_LAYER_BASE_MSB		equ	$0416
                            	    41: VDC_LAYER_BASE_LSB		equ	$0417
                            	    42: VDC_LAYER_COLOR0		equ	$0418
                            	    43: VDC_LAYER_COLOR1		equ	$0419
                            	    44: VDC_LAYER_COLOR2		equ	$041a
                            	    45: VDC_LAYER_COLOR3		equ	$041b
                            	    46: 
                            	    47: VDC_SPRITE_X_MSB		equ	$0420
                            	    48: VDC_SPRITE_X_LSB		equ	$0421
                            	    49: VDC_SPRITE_Y_MSB		equ	$0422
                            	    50: VDC_SPRITE_Y_LSB		equ	$0423
                            	    51: VDC_SPRITE_COLOR0		equ	$0428
                            	    52: VDC_SPRITE_COLOR1		equ	$0429
                            	    53: VDC_SPRITE_COLOR2		equ	$042a
                            	    54: VDC_SPRITE_COLOR3		equ	$042b
                            	    55: 
                            	    56: VDC_TILESET0			equ	$0800
                            	    57: VDC_TILESET1			equ	$1000
                            	    58: 
                            	    59: VDC_LAYER0			equ	$2000
                            	    60: VDC_LAYER1			equ	$2800
                            	    61: VDC_LAYER2			equ	$3000
                            	    62: VDC_LAYER3			equ	$3800
                            	    63: 
                            	    64: ; sound devices
                            	    65: SID0_F				equ	$0500
                            	    66: SID0_PW				equ	$0502
                            	    67: SID0_V				equ	$051b
                            	    68: SID1_V				equ	$053b
                            	    69: MIX_SID0_LEFT			equ	$0580
                            	    70: MIX_SID0_RIGHT			equ	$0581
                            	    71: MIX_SID1_LEFT			equ	$0582
                            	    72: MIX_SID1_RIGHT			equ	$0583
                            	    73: MIX_ANA0_LEFT			equ	$0584
                            	    74: MIX_ANA0_RIGHT			equ	$0585
                            	    75: MIX_ANA1_LEFT			equ	$0586
                            	    76: MIX_ANA1_RIGHT			equ	$0587
                            	    77: 
                            	    78: ; timer
                            	    79: TIMER_SR			equ	$0440
                            	    80: TIMER_CR			equ	$0441
                            	    81: TIMER0_BPM			equ	$0450
                            	    82: TIMER1_BPM			equ	$0452
                            	    83: TIMER2_BPM			equ	$0454
                            	    84: TIMER3_BPM			equ	$0456
                            	    85: TIMER4_BPM			equ	$0458
                            	    86: TIMER5_BPM			equ	$045a
                            	    87: TIMER6_BPM			equ	$045c
                            	    88: TIMER7_BPM			equ	$045e
                            	    89: 
                            	    90: ; core
                            	    91: CORE_SR				equ	$0480
                            	    92: CORE_CR				equ	$0481
                            	    93: CORE_ROMS			equ	$0482
                            	    94: CORE_INPUT0			equ	$0488

Source: "rom.s"
                            	     9: 
                            	    10: LOGO_ANIMATION	equ	$4000	; 1 byte
                            	    11: 
                            	    12: 	org	$00010000	; rom based at $10000
                            	    13: 
00:00010000 01000000        	    14: 	dc.l	$01000000	; initial ssp at end of ram
00:00010004 00010020        	    15: 	dc.l	_start		; reset vector
00:00010008 726F6D206D633638	    16: 	dc.b	"rom mc68000 0.4 20251026"
00:00010010 30303020302E3420
00:00010018 3230323531303236
                            	    17: 
                            	    18: 	align	2
                            	    19: 
                            	    20: _start
00:00010020 207C00010000    	    21: 	move.l	#$00010000,A0			; set usp
00:00010026 4E60            	    22: 	move.l	A0,USP
                            	    23: 
00:00010028 4EB900010196    	    24: 	jsr	init_vector_table
00:0001002E 4EB900010200    	    25: 	jsr	vdc_init_layer0
00:00010034 4EB900010236    	    26: 	jsr	vdc_copy_rom_font
00:0001003A 4EB900010262    	    27: 	jsr	vdc_copy_logo_tiles
00:00010040 4EB900010282    	    28: 	jsr	vdc_init_logo
00:00010046 4EB900010154    	    29: 	jsr	sound_reset
                            	    30: 
00:0001004C 11FC00684000    	    31: 	move.b	#$68,LOGO_ANIMATION.w		; init variable for letter wobble
00:00010052 13FC00B30000040F	    32: 	move.b	#$b3,VDC_IRQ_SCANLINE_LSB	; set rasterline 179
00:0001005A 13FC000100000401	    33: 	move.b	#%00000001,VDC_CR		; enable irq's for vdc
                            	    34: 
00:00010062 46FC0000        	    35: 	move.w	#$0000,SR			; set status register (User Mode, ipl = 0)
                            	    36: 
00:00010066 103C0000        	    37: 	move.b	#0,D0
                            	    38: 
00:0001006A B03C0004        	    39: loop	cmp.b	#4,D0
00:0001006E 5200            	    40: 	addq.b	#1,D0
00:00010070 6000FFF8        	    41: 	bra	loop				; loop forever, wait for events
                            	    42: 
                            	    43: 
                            	    44: exc_addr_error
00:00010074 6000FFFE        	    45: 	bra	exc_addr_error			; TODO: bsod when this happens?
                            	    46: 
                            	    47: 
                            	    48: exc_lvl1_irq_auto
00:00010078 4E73            	    49: 	rte
                            	    50: 
                            	    51: 
                            	    52: exc_lvl2_irq_auto
00:0001007A 1F00            	    53: 	move.b	D0,-(SP)
                            	    54: 
00:0001007C 103900000480    	    55: 	move.b	CORE_SR,D0				; did core cause an irq?
00:00010082 67000016        	    56: 	beq	.1					; no
00:00010086 13C000000480    	    57: 	move.b	D0,CORE_SR				; yes, acknowledge
00:0001008C 423900000407    	    58: 	clr.b	VDC_CURRENT_SPRITE
00:00010092 523900000429    	    59: 	addq.b	#1,VDC_SPRITE_COLOR1
                            	    60: 
00:00010098 101F            	    61: 	move.b	(SP)+,D0
00:0001009A 4E73            	    62: .1	rte
                            	    63: 
                            	    64: 
                            	    65: exc_lvl4_irq_auto					; coupled to timer
00:0001009C 48E7C080        	    66: 	movem.l	D0-D1/A0,-(SP)
                            	    67: 
00:000100A0 207C00000100    	    68: 	movea.l	#VEC_TIMER0,A0
00:000100A6 103C0001        	    69: 	move.b	#%00000001,D0	; D0 contains the bit to be tested
                            	    70: 
00:000100AA 1200            	    71: .1	move.b	D0,D1		; copy D0 to D1
00:000100AC C2380440        	    72: 	and.b	TIMER_SR.w,D1
00:000100B0 6600000C        	    73: 	bne	.2		; it was this timer
00:000100B4 5848            	    74: 	addq	#4,A0
00:000100B6 E300            	    75: 	asl.b	D0
00:000100B8 6700000C        	    76: 	beq	.3
00:000100BC 60EC            	    77: 	bra.s	.1
                            	    78: 
                            	    79: 	; code for dealing with this timer
00:000100BE 11C00440        	    80: .2	move.b	D0,TIMER_SR.w	; confirm this irq
00:000100C2 2050            	    81: 	movea.l	(A0),A0
00:000100C4 4E90            	    82: 	jsr	(A0)
                            	    83: 
00:000100C6 4CDF0103        	    84: .3	movem.l	(SP)+,D0-D1/A0
00:000100CA 4E73            	    85: 	rte
                            	    86: 
                            	    87: 
                            	    88: exc_lvl6_irq_auto				; coupled to vdc
00:000100CC 48E7C000        	    89: 	movem.l	D0-D1,-(SP)
00:000100D0 1F3900000407    	    90: 	move.b	VDC_CURRENT_SPRITE,-(SP)
                            	    91: 
00:000100D6 10380400        	    92: 	move.b	VDC_SR.w,D0
00:000100DA 6700005E        	    93: 	beq	.end
00:000100DE 11C00400        	    94: 	move.b	D0,VDC_SR.w			; acknowledge irq
                            	    95: 
00:000100E2 103900004000    	    96: 	move.b	LOGO_ANIMATION,D0
00:000100E8 5200            	    97: 	addq.b	#$1,D0
00:000100EA B03C00B8        	    98: 	cmp.b	#$b8,D0
00:000100EE 6600000E        	    99: 	bne	.1
00:000100F2 13FC000100000481	   100: 	move.b	#%00000001,CORE_CR		; activate irq's for binary insert
                            	   101: 						; this makes sure letters wobble at least 1 time
00:000100FA 103C0048        	   102: 	move.b	#$48,D0
                            	   103: 
00:000100FE 13C000004000    	   104: .1	move.b	D0,LOGO_ANIMATION
                            	   105: 
00:00010104 123C0004        	   106: 	move.b	#4,D1				; start with sprite 4 (letter 'l')
00:00010108 13C100000407    	   107: .2	move.b	D1,VDC_CURRENT_SPRITE
00:0001010E 13FC005A00000423	   108: 	move.b	#90,VDC_SPRITE_Y_LSB		; base position for each letter
                            	   109: 
00:00010116 103900000421    	   110: 	move.b	VDC_SPRITE_X_LSB,D0		; store x for current sprite in D0
00:0001011C 903900004000    	   111: 	sub.b	LOGO_ANIMATION,D0		; subtract logo_an x value from D0
                            	   112: 
00:00010122 B03C0008        	   113: 	cmp.b	#8,D0
00:00010126 64000008        	   114: 	bcc	.3				; if more than 8, jump to .3
                            	   115: 
00:0001012A 533900000423    	   116: 	subq.b	#1,VDC_SPRITE_Y_LSB		; move letter up 1 pixel
                            	   117: 
00:00010130 5241            	   118: .3	addq	#1,D1				; move to next sprite
00:00010132 B23C0008        	   119: 	cmp.b	#8,D1				; did we reach sprite 8?
00:00010136 6600FFD0        	   120: 	bne	.2				; not yet, jump to .2
                            	   121: 
00:0001013A 11F804880404    	   122: .end	move.b	CORE_INPUT0.w,VDC_BG_COLOR.w
                            	   123: 
00:00010140 13DF00000407    	   124: 	move.b	(SP)+,VDC_CURRENT_SPRITE
00:00010146 4CDF0003        	   125: 	movem.l	(SP)+,D0-D1
00:0001014A 4E73            	   126: 	rte
                            	   127: 
                            	   128: 
                            	   129: timer_default_handler
00:0001014C 11FC00120404    	   130: 	move.b	#$12,VDC_BG_COLOR.w
00:00010152 4E75            	   131: 	rts
                            	   132: 
                            	   133: 
                            	   134: sound_reset
00:00010154 48E78080        	   135: 	movem.l	D0/A0,-(SP)
                            	   136: 
00:00010158 207C00000500    	   137: 	movea.l	#SID0_F,A0
                            	   138: 
00:0001015E 4218            	   139: .1	clr.b	(A0)+
00:00010160 B1FC00000540    	   140: 	cmpa.l	#SID0_F+$40,A0
00:00010166 6600FFF6        	   141: 	bne	.1
                            	   142: 
00:0001016A 103C007F        	   143: 	move.b	#$7f,D0
00:0001016E 207C00000580    	   144: 	movea.l	#MIX_SID0_LEFT,A0
                            	   145: 
00:00010174 10C0            	   146: .2	move.b	D0,(A0)+
00:00010176 B1FC00000588    	   147: 	cmpa.l	#MIX_SID0_LEFT+$8,A0
00:0001017C 6600FFF6        	   148: 	bne	.2
                            	   149: 
00:00010180 13FC000F0000051B	   150: 	move.b	#$f,SID0_V
00:00010188 13FC000F0000053B	   151: 	move.b	#$f,SID1_V
                            	   152: 
00:00010190 4CDF0101        	   153: 	movem.l	(SP)+,D0/A0
00:00010194 4E75            	   154: 	rts
                            	   155: 
                            	   156: 
                            	   157: init_vector_table
00:00010196 21FC00010074000C	   158: 	move.l	#exc_addr_error,VEC_ADDR_ERROR.w
00:0001019E 21FC000100780064	   159: 	move.l	#exc_lvl1_irq_auto,VEC_LVL1_IRQ_AUTO.w
00:000101A6 21FC0001007A0068	   160: 	move.l	#exc_lvl2_irq_auto,VEC_LVL2_IRQ_AUTO.w
00:000101AE 21FC0001009C0070	   161: 	move.l	#exc_lvl4_irq_auto,VEC_LVL4_IRQ_AUTO.w
00:000101B6 21FC000100CC0078	   162: 	move.l	#exc_lvl6_irq_auto,VEC_LVL6_IRQ_AUTO.w
00:000101BE 21FC0001014C0100	   163: 	move.l	#timer_default_handler,VEC_TIMER0.w
00:000101C6 21FC0001014C0104	   164: 	move.l	#timer_default_handler,VEC_TIMER1.w
00:000101CE 21FC0001014C0108	   165: 	move.l	#timer_default_handler,VEC_TIMER2.w
00:000101D6 21FC0001014C010C	   166: 	move.l	#timer_default_handler,VEC_TIMER3.w
00:000101DE 21FC0001014C0110	   167: 	move.l	#timer_default_handler,VEC_TIMER4.w
00:000101E6 21FC0001014C0114	   168: 	move.l	#timer_default_handler,VEC_TIMER5.w
00:000101EE 21FC0001014C0118	   169: 	move.l	#timer_default_handler,VEC_TIMER6.w
00:000101F6 21FC0001014C011C	   170: 	move.l	#timer_default_handler,VEC_TIMER7.w
00:000101FE 4E75            	   171: 	rts
                            	   172: 
                            	   173: 
                            	   174: vdc_init_layer0				; make layer0 visible and clear
00:00010200 48E780C0        	   175: 	movem.l	D0/A0-A1,-(SP)
00:00010204 1F380406        	   176: 	move.b	VDC_CURRENT_LAYER.w,-(SP)
00:00010208 42380406        	   177: 	clr.b	VDC_CURRENT_LAYER.w	; make layer 0 current
00:0001020C 11FC00070414    	   178: 	move.b	#7,VDC_LAYER_FLAGS0.w
00:00010212 203C20202020    	   179: 	move.l	#$20202020,D0
00:00010218 207C00002000    	   180: 	movea.l	#VDC_LAYER0,A0
00:0001021E 227C00002800    	   181: 	movea.l	#VDC_LAYER0+$800,A1
                            	   182: 
00:00010224 20C0            	   183: .1	move.l	D0,(A0)+
00:00010226 B1C9            	   184: 	cmpa.l	A1,A0
00:00010228 6600FFFA        	   185: 	bne	.1
                            	   186: 
00:0001022C 11DF0406        	   187: 	move.b	(SP)+,VDC_CURRENT_LAYER.w
00:00010230 4CDF0301        	   188: 	movem.l	(SP)+,D0/A0-A1
00:00010234 4E75            	   189: 	rts
                            	   190: 
                            	   191: 
                            	   192: vdc_copy_rom_font
00:00010236 48E700C0        	   193: 	movem.l	A0-A1,-(SP)
00:0001023A 1F380482        	   194: 	move.b	CORE_ROMS.w,-(SP)
                            	   195: 
00:0001023E 003800020482    	   196: 	or.b	#%00000010,CORE_ROMS.w			; make rom font visible to cpu
00:00010244 207C00001000    	   197: 	movea.l	#VDC_TILESET1,A0
00:0001024A 227C00002000    	   198: 	movea.l	#VDC_TILESET1+$1000,A1
                            	   199: 
00:00010250 20D0            	   200: .1	move.l	(A0),(A0)+				; copy rom font to underlying ram
00:00010252 B0C9            	   201: 	cmpa	A1,A0
00:00010254 6600FFFA        	   202: 	bne	.1
                            	   203: 
00:00010258 11DF0482        	   204: 	move.b	(SP)+,CORE_ROMS.w
00:0001025C 4CDF0300        	   205: 	movem.l	(SP)+,A0-A1
00:00010260 4E75            	   206: 	rts
                            	   207: 
                            	   208: 
                            	   209: vdc_copy_logo_tiles
00:00010262 48E700C0        	   210: 	movem.l	A0-A1,-(SP)
00:00010266 207C000102F0    	   211: 	movea.l	#logo_tiles,A0
00:0001026C 327C11C0        	   212: 	movea.w	#$11c0,A1		; start at tile $1c
                            	   213: 
00:00010270 12D8            	   214: .1	move.b	(A0)+,(A1)+
00:00010272 B1FC00010330    	   215: 	cmpa.l	#logo_tiles+64,A0	; 64 bytes = 4 tiles
00:00010278 6600FFF6        	   216: 	bne	.1
                            	   217: 
00:0001027C 4CDF0300        	   218: 	movem.l	(SP)+,A0-A1
00:00010280 4E75            	   219: 	rts
                            	   220: 
                            	   221: 
                            	   222: vdc_init_logo
00:00010282 48E780C0        	   223: 	movem.l	D0/A0-A1,-(SP)
                            	   224: 
00:00010286 207C000102B8    	   225: 	movea.l	#logo_data,A0
00:0001028C 4200            	   226: 	clr.b	D0
00:0001028E 13C000000407    	   227: .1	move.b	D0,VDC_CURRENT_SPRITE
00:00010294 227C00000420    	   228: 	movea.l	#VDC_SPRITE_X_MSB,A1
00:0001029A 12D8            	   229: .2	move.b	(A0)+,(A1)+
00:0001029C B3FC00000427    	   230: 	cmpa.l	#VDC_SPRITE_X_MSB+7,A1
00:000102A2 6600FFF6        	   231: 	bne	.2
00:000102A6 5240            	   232: 	addq	#1,D0
00:000102A8 B1FC000102F0    	   233: 	cmpa.l	#logo_data+56,A0
00:000102AE 6600FFDE        	   234: 	bne	.1
                            	   235: 
00:000102B2 4CDF0301        	   236: 	movem.l	(SP)+,D0/A0-A1
00:000102B6 4E75            	   237: 	rts
                            	   238: 
                            	   239: 
                            	   240: logo_data
00:000102B8 00              	   241: 	dc.b	0,152,0,74,%111,0,$1c	; icon top left
00:000102B9 98
00:000102BA 00
00:000102BB 4A
00:000102BC 07
00:000102BD 00
00:000102BE 1C
00:000102BF 00              	   242: 	dc.b	0,160,0,74,%111,0,$1d	; icon top right
00:000102C0 A0
00:000102C1 00
00:000102C2 4A
00:000102C3 07
00:000102C4 00
00:000102C5 1D
00:000102C6 00              	   243: 	dc.b	0,152,0,82,%111,0,$1e	; icon bottom left
00:000102C7 98
00:000102C8 00
00:000102C9 52
00:000102CA 07
00:000102CB 00
00:000102CC 1E
00:000102CD 00              	   244: 	dc.b	0,160,0,82,%111,0,$1f	; icon bottom right
00:000102CE A0
00:000102CF 00
00:000102D0 52
00:000102D1 07
00:000102D2 00
00:000102D3 1F
00:000102D4 00              	   245: 	dc.b	0,147,0,90,%111,0,$6c	; l
00:000102D5 93
00:000102D6 00
00:000102D7 5A
00:000102D8 07
00:000102D9 00
00:000102DA 6C
00:000102DB 00              	   246: 	dc.b	0,152,0,90,%111,0,$69	; i
00:000102DC 98
00:000102DD 00
00:000102DE 5A
00:000102DF 07
00:000102E0 00
00:000102E1 69
00:000102E2 00              	   247: 	dc.b	0,158,0,90,%111,0,$6d	; m
00:000102E3 9E
00:000102E4 00
00:000102E5 5A
00:000102E6 07
00:000102E7 00
00:000102E8 6D
00:000102E9 00              	   248: 	dc.b	0,166,0,90,%111,0,$65	; e
00:000102EA A6
00:000102EB 00
00:000102EC 5A
00:000102ED 07
00:000102EE 00
00:000102EF 65
                            	   249: 
                            	   250: 
                            	   251: logo_tiles
00:000102F0 00              	   252: 	dc.b	%00000000,%00000000	; tile 1 (icon upper left)
00:000102F1 00
00:000102F2 01              	   253: 	dc.b	%00000001,%00000000
00:000102F3 00
00:000102F4 07              	   254: 	dc.b	%00000111,%10000000
00:000102F5 80
00:000102F6 07              	   255: 	dc.b	%00000111,%10100000
00:000102F7 A0
00:000102F8 1E              	   256: 	dc.b	%00011110,%11111000
00:000102F9 F8
00:000102FA 1E              	   257: 	dc.b	%00011110,%10101111
00:000102FB AF
00:000102FC 1E              	   258: 	dc.b	%00011110,%10101010
00:000102FD AA
00:000102FE 1E              	   259: 	dc.b	%00011110,%10101111
00:000102FF AF
                            	   260: 
00:00010300 00              	   261: 	dc.b	%00000000,%00000000	; tile 2 (icon upper right)
00:00010301 00
00:00010302 00              	   262: 	dc.b	%00000000,%00000000
00:00010303 00
00:00010304 00              	   263: 	dc.b	%00000000,%00000000
00:00010305 00
00:00010306 00              	   264: 	dc.b	%00000000,%00000000
00:00010307 00
00:00010308 00              	   265: 	dc.b	%00000000,%00000000
00:00010309 00
00:0001030A 00              	   266: 	dc.b	%00000000,%00000000
00:0001030B 00
00:0001030C C0              	   267: 	dc.b	%11000000,%00000000
00:0001030D 00
00:0001030E B0              	   268: 	dc.b	%10110000,%00000000
00:0001030F 00
                            	   269: 
00:00010310 1E              	   270: 	dc.b	%00011110,%11111010	; tile 3 (icon bottom left)
00:00010311 FA
00:00010312 07              	   271: 	dc.b	%00000111,%10101010
00:00010313 AA
00:00010314 07              	   272: 	dc.b	%00000111,%10101011
00:00010315 AB
00:00010316 01              	   273: 	dc.b	%00000001,%11101011
00:00010317 EB
00:00010318 00              	   274: 	dc.b	%00000000,%01111110
00:00010319 7E
00:0001031A 00              	   275: 	dc.b	%00000000,%00010111
00:0001031B 17
00:0001031C 00              	   276: 	dc.b	%00000000,%00000001
00:0001031D 01
00:0001031E 00              	   277: 	dc.b	%00000000,%00000000
00:0001031F 00
                            	   278: 
00:00010320 EC              	   279: 	dc.b	%11101100,%00000000	; tile 4 (icon bottom right)
00:00010321 00
00:00010322 EE              	   280: 	dc.b	%11101110,%00000000
00:00010323 00
00:00010324 AB              	   281: 	dc.b	%10101011,%10000000
00:00010325 80
00:00010326 AB              	   282: 	dc.b	%10101011,%10100000
00:00010327 A0
00:00010328 AA              	   283: 	dc.b	%10101010,%11110100
00:00010329 F4
00:0001032A FF              	   284: 	dc.b	%11111111,%01010000
00:0001032B 50
00:0001032C 55              	   285: 	dc.b	%01010101,%00000000
00:0001032D 00
00:0001032E 00              	   286: 	dc.b	%00000000,%00000000
00:0001032F 00
                            	   287: 


Symbols by name:
CORE_CR                          E:00000481
CORE_INPUT0                      E:00000488
CORE_ROMS                        E:00000482
CORE_SR                          E:00000480
LOGO_ANIMATION                   E:00004000
MIX_SID0_LEFT                    E:00000580
SID0_F                           E:00000500
SID0_V                           E:0000051B
SID1_V                           E:0000053B
TIMER_SR                         E:00000440
VDC_BG_COLOR                     E:00000404
VDC_CR                           E:00000401
VDC_CURRENT_LAYER                E:00000406
VDC_CURRENT_SPRITE               E:00000407
VDC_IRQ_SCANLINE_LSB             E:0000040F
VDC_LAYER0                       E:00002000
VDC_LAYER_FLAGS0                 E:00000414
VDC_SPRITE_COLOR1                E:00000429
VDC_SPRITE_X_LSB                 E:00000421
VDC_SPRITE_X_MSB                 E:00000420
VDC_SPRITE_Y_LSB                 E:00000423
VDC_SR                           E:00000400
VDC_TILESET1                     E:00001000
VEC_ADDR_ERROR                   E:0000000C
VEC_LVL1_IRQ_AUTO                E:00000064
VEC_LVL2_IRQ_AUTO                E:00000068
VEC_LVL4_IRQ_AUTO                E:00000070
VEC_LVL6_IRQ_AUTO                E:00000078
VEC_TIMER0                       E:00000100
VEC_TIMER1                       E:00000104
VEC_TIMER2                       E:00000108
VEC_TIMER3                       E:0000010C
VEC_TIMER4                       E:00000110
VEC_TIMER5                       E:00000114
VEC_TIMER6                       E:00000118
VEC_TIMER7                       E:0000011C
_start                           A:00010020
exc_addr_error                   A:00010074
exc_lvl1_irq_auto                A:00010078
exc_lvl2_irq_auto                A:0001007A
exc_lvl4_irq_auto                A:0001009C
exc_lvl6_irq_auto                A:000100CC
init_vector_table                A:00010196
logo_data                        A:000102B8
logo_tiles                       A:000102F0
loop                             A:0001006A
sound_reset                      A:00010154
timer_default_handler            A:0001014C
vdc_copy_logo_tiles              A:00010262
vdc_copy_rom_font                A:00010236
vdc_init_layer0                  A:00010200
vdc_init_logo                    A:00010282

Symbols by value:
0000000C VEC_ADDR_ERROR
00000064 VEC_LVL1_IRQ_AUTO
00000068 VEC_LVL2_IRQ_AUTO
00000070 VEC_LVL4_IRQ_AUTO
00000078 VEC_LVL6_IRQ_AUTO
00000100 VEC_TIMER0
00000104 VEC_TIMER1
00000108 VEC_TIMER2
0000010C VEC_TIMER3
00000110 VEC_TIMER4
00000114 VEC_TIMER5
00000118 VEC_TIMER6
0000011C VEC_TIMER7
00000400 VDC_SR
00000401 VDC_CR
00000404 VDC_BG_COLOR
00000406 VDC_CURRENT_LAYER
00000407 VDC_CURRENT_SPRITE
0000040F VDC_IRQ_SCANLINE_LSB
00000414 VDC_LAYER_FLAGS0
00000420 VDC_SPRITE_X_MSB
00000421 VDC_SPRITE_X_LSB
00000423 VDC_SPRITE_Y_LSB
00000429 VDC_SPRITE_COLOR1
00000440 TIMER_SR
00000480 CORE_SR
00000481 CORE_CR
00000482 CORE_ROMS
00000488 CORE_INPUT0
00000500 SID0_F
0000051B SID0_V
0000053B SID1_V
00000580 MIX_SID0_LEFT
00001000 VDC_TILESET1
00002000 VDC_LAYER0
00004000 LOGO_ANIMATION
00010020 _start
0001006A loop
00010074 exc_addr_error
00010078 exc_lvl1_irq_auto
0001007A exc_lvl2_irq_auto
0001009C exc_lvl4_irq_auto
000100CC exc_lvl6_irq_auto
0001014C timer_default_handler
00010154 sound_reset
00010196 init_vector_table
00010200 vdc_init_layer0
00010236 vdc_copy_rom_font
00010262 vdc_copy_logo_tiles
00010282 vdc_init_logo
000102B8 logo_data
000102F0 logo_tiles
